/*
 * @author fkl-rt, $LastChangedBy: fkl $
 * @version $Rev: 291 $, $Date: 2016-06-28 16:11:43 +0200 (Di, 28 Jun 2016) $
 */
import uml : 'http://www.eclipse.org/uml2/5.0.0/UML'
import SysML : 'http://www.eclipse.org/papyrus/sysml/1.4/SysML' /**/

package uml

context Model

def: asError(verdict : Boolean) : Boolean = if verdict then true else null endif

def: setToString(s : Collection(NamedElement)) : String
	= replaceSetStrings(s.name->asSet()->toString().replaceFirst('Set', ''))
def: setToQualifiedString(s : Collection(NamedElement)) : String
	= replaceSetStrings(s->collect(n : NamedElement | n.namespace.name+'::'+n.name)->asSet()->toString().replaceFirst('Set', ''))
def: replaceSetStrings(s : String) : String
	= s.substring(2,s.size()).replaceFirst('}', '')

/* Functional devices */
inv TestHasFunctionalPorts('The top-level function ' + Model::setToString(Class::getTopLevel) + ' does not contain corresponding ports to all ports of the functional devices.')
	: Model::getFunctionalDevices.ownedPort()
		->select(p : Port | Class::getTopLevel.ownedPort().name->excludes(p.name))
			->isEmpty()
			
def: getFunctionalDevices : Set(Class)
	= Class::getAllClasses
		->select(c : Class | 
			c.ownedAttribute
				->select(prop | prop.aggregation = AggregationKind::none 
					or (not prop.oclIsTypeOf(Port) and prop.aggregation = AggregationKind::composite)
				)->isEmpty()
		)
	
def: matchingPorts(portToMatch : Port) : Sequence(Port) = Class::getTopLevel.ownedPort()->select(p : Port | p.name=portToMatch.name)->asSequence()
def: getMatchingPort(portToMatch : Port) : Port
	= if matchingPorts(portToMatch)->notEmpty()
		then matchingPorts(portToMatch)->first()
		else null
	endif
		
def: getFuncPortsInSameDirection : Set(Port)
	= Model::getFunctionalDevices.ownedPort()
		->select(p : Port | getMatchingPort(p) <> null and getMatchingPort(p).isConjugated = p.isConjugated)->asSet()
		
inv TestFuncPortsDirectionMatching('The ports ' + setToString(getFuncPortsInSameDirection) 
	+ ' do not have consistent directions on the functional device and on the top-level function '+ Model::setToString(Class::getTopLevel) + '!'
)
	: asError(getFuncPortsInSameDirection->isEmpty())

inv HasFunctionalDevices('There are no functional devices defined.')
	: getFunctionalDevices->notEmpty()

context Class

/* Returns true if a class has not to be checked (e.g. if it's not a Function) */
def: hasNotToBeChecked(c : Class) : Boolean
	= c.getAppliedStereotype('CONSENS::Function') = null

def: getAllClasses : Set(Class)
	= Class.allInstances()->select(c | hasNotToBeChecked(c) = false)

/* ID and purpose comments */
inv TestIdComments('The function ' + self.name + ' contains no ID comment - is it new?')
	: self.ownedComment->select(c : Comment | c._body.toString().startsWith('ID:'))->notEmpty() or hasNotToBeChecked(self)

inv TestPurposeComments('The function ' + self.name + ' contains no purpose comment - is it new?')
	: self.ownedComment->select(c : Comment | c._body.toString().startsWith('Purpose:'))->notEmpty() or hasNotToBeChecked(self)
		

def: getParents(candidate : Class) : Set(Class)
	= getAllClasses
		->select(c : Class | 
			c.ownedAttribute->selectByType(Property).type->includes(candidate)
		)

def: getChildren(candidate : Class) : Set(Class)
	= getAllClasses
		->select(c : Class |
			candidate.ownedAttribute.type->includes(c)
		)

def: getTopLevel : Set(Class)
	= getAllClasses
		->select(c : Class |
			 getParents(c)->isEmpty() /* i.e. class has no parents */
			 and getChildren(c)->notEmpty() /* i.e. class has children / is not a functional device */
		)
	
def: getLeafClasses : Set(Class)
	= getAllClasses
		->select(c : Class |
			getParents(c)->notEmpty() /* i.e. class has a parent  / is not a functional device */
			and getChildren(c)->isEmpty() /* i.e. class has no children */
		)

/* Parent and child ports */
def: getParentPorts: Set(Port)
	= getParents(self).ownedPort->asSet()

def: getMatchingParentPort(me: Port): Port
	= if getParentPorts->select(parent | parent.name = me.name)->notEmpty()
		then getParentPorts->select(parent | parent.name = me.name)->asSequence()->first()
		else null
		endif

def: getChildPorts: Set(Port)
	= getChildren(self).ownedPort->asSet()

/* Get the operations of a child port that are not in the set of parent ports operations */
def: operationsNotDefinedInParent : Collection(Operation) = 
	self.ownedPort.getPortOperations->select(op : Operation | /* self = child */
		not getParentPorts.getPortOperations.name->includes(op.name)
	)
inv HasOperationsNotDefinedInParent('The operation(s) '
	+ Model::setToQualifiedString(operationsNotDefinedInParent)
	+ ' of the function ' + self.name + ' are not defined in any of its parent functions!')
	: Model::asError( /* Do NOT throw an error if one of the following is true: */
		Model::getFunctionalDevices.name->includes(self.name) /* this class is not a functional device */
		or operationsNotDefinedInParent->isEmpty() /* or it has no ports that are not defined in its parent classes*/
		or getTopLevel.name->includes(self.name) /* or is not a top-level-class */
		or hasNotToBeChecked(self) /* or it doesn't have to be checked */
	)

/* Go through all parent ports' operations to find ops not used by any child */
def: operationsNotUsedInChildren : Collection(Operation) = 
	self.ownedPort.getPortOperations->select(op : Operation | /* self = parent */
		getChildPorts.getPortOperations.name->excludes(op.name)
	)->asSet()
inv HasOperationsNotUsedInChildren('The operation(s) '
	+ Model::setToQualifiedString(operationsNotUsedInChildren)
	+ ' of the function ' + self.name + ' are not used by any of its child functions.')
	: 	Model::getFunctionalDevices.name->includes(self.name) /* this class is not a functional device */
		or operationsNotUsedInChildren->isEmpty()
		or getLeafClasses.name->includes(self.name)
		or hasNotToBeChecked(self)

def: portsWithDifferentDirection : Set(Port) 
	= self.ownedPort->select(p | getMatchingParentPort(p) <> null and getMatchingParentPort(p).isConjugated <> p.isConjugated)
inv HasParentPortsWithDifferentDirection('The ports '
	+ Model::setToString(portsWithDifferentDirection)
	+ ' of the function ' + self.name + ' have a different direction in the parent function!'
)
	: Model::asError(portsWithDifferentDirection->isEmpty() or hasNotToBeChecked(self))

/* Incoming and outgoing ports */
def: getIncomingPorts : Set (Port)
	= self.ownedPort
		->select(p | not p.isConjugated)

inv TestHasIncoming('The function ' + self.name + ' has no incoming ports.')
	: 	getIncomingPorts
		->notEmpty()
		or hasNotToBeChecked(self)
		
def: getOutgoingPorts : Set (Port)
	= self.ownedPort
		->select(p | p.isConjugated)

inv TestHasOutgoing('The function ' + self.name + ' has no outgoing ports.')
	: 	getOutgoingPorts
		->notEmpty()
		or hasNotToBeChecked(self)
		
context Port

def: getPortOperations: Set(Operation)
	= self.type.ownedElement.oclAsType(Operation)->asSet()

endpackage