/*
* generated by Xtext
*/
package de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.fraunhofer.iem.reqpat.core.services.ReqPatGrammarAccess;

public class ReqPatParser extends AbstractContentAssistParser {
	
	@Inject
	private ReqPatGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr.internal.InternalReqPatParser createParser() {
		de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr.internal.InternalReqPatParser result = new de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr.internal.InternalReqPatParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSpecObjAccess().getAlternatives_1(), "rule__SpecObj__Alternatives_1");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getSpecObjAccess().getGroup(), "rule__SpecObj__Group__0");
					put(grammarAccess.getHeadingSOAccess().getGroup(), "rule__HeadingSO__Group__0");
					put(grammarAccess.getHeadingSOAccess().getGroup_7(), "rule__HeadingSO__Group_7__0");
					put(grammarAccess.getReqPatSOAccess().getGroup(), "rule__ReqPatSO__Group__0");
					put(grammarAccess.getReqPatSOAccess().getGroup_7(), "rule__ReqPatSO__Group_7__0");
					put(grammarAccess.getFreeTextSOAccess().getGroup(), "rule__FreeTextSO__Group__0");
					put(grammarAccess.getFreeTextSOAccess().getGroup_7(), "rule__FreeTextSO__Group_7__0");
					put(grammarAccess.getRequirementPatternAccess().getGroup(), "rule__RequirementPattern__Group__0");
					put(grammarAccess.getRootAccess().getSpecObjectsAssignment_1(), "rule__Root__SpecObjectsAssignment_1");
					put(grammarAccess.getHeadingSOAccess().getIdAssignment_5(), "rule__HeadingSO__IdAssignment_5");
					put(grammarAccess.getHeadingSOAccess().getParentAssignment_7_1(), "rule__HeadingSO__ParentAssignment_7_1");
					put(grammarAccess.getHeadingSOAccess().getTextAssignment_8(), "rule__HeadingSO__TextAssignment_8");
					put(grammarAccess.getReqPatSOAccess().getIdAssignment_5(), "rule__ReqPatSO__IdAssignment_5");
					put(grammarAccess.getReqPatSOAccess().getParentAssignment_7_1(), "rule__ReqPatSO__ParentAssignment_7_1");
					put(grammarAccess.getReqPatSOAccess().getRequirementPatternsAssignment_8(), "rule__ReqPatSO__RequirementPatternsAssignment_8");
					put(grammarAccess.getFreeTextSOAccess().getIdAssignment_5(), "rule__FreeTextSO__IdAssignment_5");
					put(grammarAccess.getFreeTextSOAccess().getParentAssignment_7_1(), "rule__FreeTextSO__ParentAssignment_7_1");
					put(grammarAccess.getFreeTextSOAccess().getFreeTextAssignment_8(), "rule__FreeTextSO__FreeTextAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr.internal.InternalReqPatParser typedParser = (de.fraunhofer.iem.reqpat.core.ui.contentassist.antlr.internal.InternalReqPatParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ReqPatGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ReqPatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
