/*
* generated by Xtext
*/

package de.fraunhofer.iem.reqpat.core.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReqPatGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecObjectsSpecObjParserRuleCall_1_0 = (RuleCall)cSpecObjectsAssignment_1.eContents().get(0);
		
		//Root returns Specification:
		//
		//	{Specification} specObjects+=SpecObj+;
		public ParserRule getRule() { return rule; }

		//{Specification} specObjects+=SpecObj+
		public Group getGroup() { return cGroup; }

		//{Specification}
		public Action getSpecificationAction_0() { return cSpecificationAction_0; }

		//specObjects+=SpecObj+
		public Assignment getSpecObjectsAssignment_1() { return cSpecObjectsAssignment_1; }

		//SpecObj
		public RuleCall getSpecObjectsSpecObjParserRuleCall_1_0() { return cSpecObjectsSpecObjParserRuleCall_1_0; }
	}

	public class SpecObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecObj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPECOBJECTDELIMITERLEFTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cHeadingSOParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cReqPatSOParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFreeTextSOParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cSPECOBJECTDELIMITERRIGHTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SpecObj returns SpecObject:
		//
		//	SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT;
		public ParserRule getRule() { return rule; }

		//SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT
		public Group getGroup() { return cGroup; }

		//SPECOBJECTDELIMITERLEFT
		public RuleCall getSPECOBJECTDELIMITERLEFTTerminalRuleCall_0() { return cSPECOBJECTDELIMITERLEFTTerminalRuleCall_0; }

		//HeadingSO | ReqPatSO | FreeTextSO
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//HeadingSO
		public RuleCall getHeadingSOParserRuleCall_1_0() { return cHeadingSOParserRuleCall_1_0; }

		//ReqPatSO
		public RuleCall getReqPatSOParserRuleCall_1_1() { return cReqPatSOParserRuleCall_1_1; }

		//FreeTextSO
		public RuleCall getFreeTextSOParserRuleCall_1_2() { return cFreeTextSOParserRuleCall_1_2; }

		//SPECOBJECTDELIMITERRIGHT
		public RuleCall getSPECOBJECTDELIMITERRIGHTTerminalRuleCall_2() { return cSPECOBJECTDELIMITERRIGHTTerminalRuleCall_2; }
	}

	public class HeadingSOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeadingSO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHeadingSpecObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdIDTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cParentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParentSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cParentAssignment_7_1.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Assignment cTextAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTextSTRINGTerminalRuleCall_8_0 = (RuleCall)cTextAssignment_8.eContents().get(0);
		
		//HeadingSO returns HeadingSpecObject:
		//
		//	{HeadingSpecObject} PARAMDELIMITERLEFT "H" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
		//
		//	(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? text=STRING;
		public ParserRule getRule() { return rule; }

		//{HeadingSpecObject} PARAMDELIMITERLEFT "H" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
		//
		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? text=STRING
		public Group getGroup() { return cGroup; }

		//{HeadingSpecObject}
		public Action getHeadingSpecObjectAction_0() { return cHeadingSpecObjectAction_0; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_1() { return cPARAMDELIMITERLEFTTerminalRuleCall_1; }

		//"H"
		public Keyword getHKeyword_2() { return cHKeyword_2; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_3() { return cPARAMDELIMITERRIGHTTerminalRuleCall_3; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_4() { return cPARAMDELIMITERLEFTTerminalRuleCall_4; }

		//id=ID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_5_0() { return cIdIDTerminalRuleCall_5_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_6() { return cPARAMDELIMITERRIGHTTerminalRuleCall_6; }

		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
		public Group getGroup_7() { return cGroup_7; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_7_0() { return cPARAMDELIMITERLEFTTerminalRuleCall_7_0; }

		//parent=STRING
		public Assignment getParentAssignment_7_1() { return cParentAssignment_7_1; }

		//STRING
		public RuleCall getParentSTRINGTerminalRuleCall_7_1_0() { return cParentSTRINGTerminalRuleCall_7_1_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_7_2() { return cPARAMDELIMITERRIGHTTerminalRuleCall_7_2; }

		//text=STRING
		public Assignment getTextAssignment_8() { return cTextAssignment_8; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_8_0() { return cTextSTRINGTerminalRuleCall_8_0; }
	}

	public class ReqPatSOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReqPatSO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementPatternSpecObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRPKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdIDTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cParentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParentSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cParentAssignment_7_1.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Assignment cRequirementPatternsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRequirementPatternsRequirementPatternParserRuleCall_8_0 = (RuleCall)cRequirementPatternsAssignment_8.eContents().get(0);
		
		//ReqPatSO returns RequirementPatternSpecObject:
		//
		//	{RequirementPatternSpecObject} PARAMDELIMITERLEFT "RP" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID
		//
		//	PARAMDELIMITERRIGHT (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? requirementPatterns+=RequirementPattern+;
		public ParserRule getRule() { return rule; }

		//{RequirementPatternSpecObject} PARAMDELIMITERLEFT "RP" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
		//
		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? requirementPatterns+=RequirementPattern+
		public Group getGroup() { return cGroup; }

		//{RequirementPatternSpecObject}
		public Action getRequirementPatternSpecObjectAction_0() { return cRequirementPatternSpecObjectAction_0; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_1() { return cPARAMDELIMITERLEFTTerminalRuleCall_1; }

		//"RP"
		public Keyword getRPKeyword_2() { return cRPKeyword_2; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_3() { return cPARAMDELIMITERRIGHTTerminalRuleCall_3; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_4() { return cPARAMDELIMITERLEFTTerminalRuleCall_4; }

		//id=ID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_5_0() { return cIdIDTerminalRuleCall_5_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_6() { return cPARAMDELIMITERRIGHTTerminalRuleCall_6; }

		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
		public Group getGroup_7() { return cGroup_7; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_7_0() { return cPARAMDELIMITERLEFTTerminalRuleCall_7_0; }

		//parent=STRING
		public Assignment getParentAssignment_7_1() { return cParentAssignment_7_1; }

		//STRING
		public RuleCall getParentSTRINGTerminalRuleCall_7_1_0() { return cParentSTRINGTerminalRuleCall_7_1_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_7_2() { return cPARAMDELIMITERRIGHTTerminalRuleCall_7_2; }

		//requirementPatterns+=RequirementPattern+
		public Assignment getRequirementPatternsAssignment_8() { return cRequirementPatternsAssignment_8; }

		//RequirementPattern
		public RuleCall getRequirementPatternsRequirementPatternParserRuleCall_8_0() { return cRequirementPatternsRequirementPatternParserRuleCall_8_0; }
	}

	public class FreeTextSOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreeTextSO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFreeTextSpecObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdIDTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cPARAMDELIMITERLEFTTerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cParentAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParentSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cParentAssignment_7_1.eContents().get(0);
		private final RuleCall cPARAMDELIMITERRIGHTTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Assignment cFreeTextAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFreeTextSTRINGTerminalRuleCall_8_0 = (RuleCall)cFreeTextAssignment_8.eContents().get(0);
		
		//FreeTextSO returns FreeTextSpecObject:
		//
		//	{FreeTextSpecObject} PARAMDELIMITERLEFT "F" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
		//
		//	(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? freeText=STRING?;
		public ParserRule getRule() { return rule; }

		//{FreeTextSpecObject} PARAMDELIMITERLEFT "F" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
		//
		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? freeText=STRING?
		public Group getGroup() { return cGroup; }

		//{FreeTextSpecObject}
		public Action getFreeTextSpecObjectAction_0() { return cFreeTextSpecObjectAction_0; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_1() { return cPARAMDELIMITERLEFTTerminalRuleCall_1; }

		//"F"
		public Keyword getFKeyword_2() { return cFKeyword_2; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_3() { return cPARAMDELIMITERRIGHTTerminalRuleCall_3; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_4() { return cPARAMDELIMITERLEFTTerminalRuleCall_4; }

		//id=ID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_5_0() { return cIdIDTerminalRuleCall_5_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_6() { return cPARAMDELIMITERRIGHTTerminalRuleCall_6; }

		//(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
		public Group getGroup_7() { return cGroup_7; }

		//PARAMDELIMITERLEFT
		public RuleCall getPARAMDELIMITERLEFTTerminalRuleCall_7_0() { return cPARAMDELIMITERLEFTTerminalRuleCall_7_0; }

		//parent=STRING
		public Assignment getParentAssignment_7_1() { return cParentAssignment_7_1; }

		//STRING
		public RuleCall getParentSTRINGTerminalRuleCall_7_1_0() { return cParentSTRINGTerminalRuleCall_7_1_0; }

		//PARAMDELIMITERRIGHT
		public RuleCall getPARAMDELIMITERRIGHTTerminalRuleCall_7_2() { return cPARAMDELIMITERRIGHTTerminalRuleCall_7_2; }

		//freeText=STRING?
		public Assignment getFreeTextAssignment_8() { return cFreeTextAssignment_8; }

		//STRING
		public RuleCall getFreeTextSTRINGTerminalRuleCall_8_0() { return cFreeTextSTRINGTerminalRuleCall_8_0; }
	}

	public class RequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequirementPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisIsASampleRequirementPatternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RequirementPattern:
		//
		//	{RequirementPattern} "This is a sample requirement pattern.";
		public ParserRule getRule() { return rule; }

		//{RequirementPattern} "This is a sample requirement pattern."
		public Group getGroup() { return cGroup; }

		//{RequirementPattern}
		public Action getRequirementPatternAction_0() { return cRequirementPatternAction_0; }

		//"This is a sample requirement pattern."
		public Keyword getThisIsASampleRequirementPatternKeyword_1() { return cThisIsASampleRequirementPatternKeyword_1; }
	}
	
	
	private RootElements pRoot;
	private SpecObjElements pSpecObj;
	private HeadingSOElements pHeadingSO;
	private ReqPatSOElements pReqPatSO;
	private FreeTextSOElements pFreeTextSO;
	private RequirementPatternElements pRequirementPattern;
	private TerminalRule tPARAMDELIMITERLEFT;
	private TerminalRule tPARAMDELIMITERRIGHT;
	private TerminalRule tSPECOBJECTDELIMITERLEFT;
	private TerminalRule tSPECOBJECTDELIMITERRIGHT;
	private TerminalRule tID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqPatGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.iem.reqpat.core.ReqPat".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root returns Specification:
	//
	//	{Specification} specObjects+=SpecObj+;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//SpecObj returns SpecObject:
	//
	//	SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT;
	public SpecObjElements getSpecObjAccess() {
		return (pSpecObj != null) ? pSpecObj : (pSpecObj = new SpecObjElements());
	}
	
	public ParserRule getSpecObjRule() {
		return getSpecObjAccess().getRule();
	}

	//HeadingSO returns HeadingSpecObject:
	//
	//	{HeadingSpecObject} PARAMDELIMITERLEFT "H" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
	//
	//	(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? text=STRING;
	public HeadingSOElements getHeadingSOAccess() {
		return (pHeadingSO != null) ? pHeadingSO : (pHeadingSO = new HeadingSOElements());
	}
	
	public ParserRule getHeadingSORule() {
		return getHeadingSOAccess().getRule();
	}

	//ReqPatSO returns RequirementPatternSpecObject:
	//
	//	{RequirementPatternSpecObject} PARAMDELIMITERLEFT "RP" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID
	//
	//	PARAMDELIMITERRIGHT (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? requirementPatterns+=RequirementPattern+;
	public ReqPatSOElements getReqPatSOAccess() {
		return (pReqPatSO != null) ? pReqPatSO : (pReqPatSO = new ReqPatSOElements());
	}
	
	public ParserRule getReqPatSORule() {
		return getReqPatSOAccess().getRule();
	}

	//FreeTextSO returns FreeTextSpecObject:
	//
	//	{FreeTextSpecObject} PARAMDELIMITERLEFT "F" PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
	//
	//	(PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? freeText=STRING?;
	public FreeTextSOElements getFreeTextSOAccess() {
		return (pFreeTextSO != null) ? pFreeTextSO : (pFreeTextSO = new FreeTextSOElements());
	}
	
	public ParserRule getFreeTextSORule() {
		return getFreeTextSOAccess().getRule();
	}

	//RequirementPattern:
	//
	//	{RequirementPattern} "This is a sample requirement pattern.";
	public RequirementPatternElements getRequirementPatternAccess() {
		return (pRequirementPattern != null) ? pRequirementPattern : (pRequirementPattern = new RequirementPatternElements());
	}
	
	public ParserRule getRequirementPatternRule() {
		return getRequirementPatternAccess().getRule();
	}

	//terminal PARAMDELIMITERLEFT:
	//
	//	"[";
	public TerminalRule getPARAMDELIMITERLEFTRule() {
		return (tPARAMDELIMITERLEFT != null) ? tPARAMDELIMITERLEFT : (tPARAMDELIMITERLEFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAMDELIMITERLEFT"));
	} 

	//terminal PARAMDELIMITERRIGHT:
	//
	//	"]";
	public TerminalRule getPARAMDELIMITERRIGHTRule() {
		return (tPARAMDELIMITERRIGHT != null) ? tPARAMDELIMITERRIGHT : (tPARAMDELIMITERRIGHT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAMDELIMITERRIGHT"));
	} 

	//terminal SPECOBJECTDELIMITERLEFT:
	//
	//	"{";
	public TerminalRule getSPECOBJECTDELIMITERLEFTRule() {
		return (tSPECOBJECTDELIMITERLEFT != null) ? tSPECOBJECTDELIMITERLEFT : (tSPECOBJECTDELIMITERLEFT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPECOBJECTDELIMITERLEFT"));
	} 

	//terminal SPECOBJECTDELIMITERRIGHT:
	//
	//	"}";
	public TerminalRule getSPECOBJECTDELIMITERRIGHTRule() {
		return (tSPECOBJECTDELIMITERRIGHT != null) ? tSPECOBJECTDELIMITERRIGHT : (tSPECOBJECTDELIMITERRIGHT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPECOBJECTDELIMITERRIGHT"));
	} 

	////Copied from default xtext grammar to add '-' and remove '^'
	//
	////Generated default grammar:
	//
	////Specification returns Specification:
	//
	////	{Specification}
	//
	////	'Specification'
	//
	////	'{'
	//
	////		('specObjects' '{' specObjects+=SpecObject ( "," specObjects+=SpecObject)* '}' )?
	//
	////	'}';
	//
	////
	//
	////SpecObject returns SpecObject:
	//
	////	RequirementPatternSpecObject | HeadingSpecObject | FreeTextSpecObject;
	//
	////
	//
	////
	//
	////EString returns ecore::EString:
	//
	////	STRING | ID;
	//
	////
	//
	////RequirementPatternSpecObject returns RequirementPatternSpecObject:
	//
	////	{RequirementPatternSpecObject}
	//
	////	'RequirementPatternSpecObject'
	//
	////	'{'
	//
	////		('id' id=EString)?
	//
	////		('parentSpecObject' parentSpecObject=[SpecObject|EString])?
	//
	////		('requirementPatterns' '{' requirementPatterns+=RequirementPattern ( "," requirementPatterns+=RequirementPattern)* '}' )?
	//
	////	'}';
	//
	////
	//
	////HeadingSpecObject returns HeadingSpecObject:
	//
	////	{HeadingSpecObject}
	//
	////	'HeadingSpecObject'
	//
	////	'{'
	//
	////		('id' id=EString)?
	//
	////		('text' text=EString)?
	//
	////		('parentSpecObject' parentSpecObject=[SpecObject|EString])?
	//
	////	'}';
	//
	////
	//
	////FreeTextSpecObject returns FreeTextSpecObject:
	//
	////	{FreeTextSpecObject}
	//
	////	'FreeTextSpecObject'
	//
	////	'{'
	//
	////		('id' id=EString)?
	//
	////		('freeText' freeText=EString)?
	//
	////		('parentSpecObject' parentSpecObject=[SpecObject|EString])?
	//
	////	'}';
	//
	//terminal ID:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
