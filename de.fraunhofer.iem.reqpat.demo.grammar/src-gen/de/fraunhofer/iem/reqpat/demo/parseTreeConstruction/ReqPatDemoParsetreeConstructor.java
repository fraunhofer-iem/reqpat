/*
 * generated by Xtext
 */
package de.fraunhofer.iem.reqpat.demo.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import de.fraunhofer.iem.reqpat.demo.services.ReqPatDemoGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ReqPatDemoParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private ReqPatDemoGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_Group(this, this, 0, inst);
			case 1: return new RequirementPattern_Group(this, this, 1, inst);
			case 2: return new TheAnalysisFunction_Group(this, this, 2, inst);
			case 3: return new TheFollowingInformation_Group(this, this, 3, inst);
			case 4: return new AnalysisFunctionDef_Group(this, this, 4, inst);
			case 5: return new AnalysisFunctionPurp_Group(this, this, 5, inst);
			case 6: return new FunctionalDeviceDef_Group(this, this, 6, inst);
			case 7: return new FunctionalDevice_Group(this, this, 7, inst);
			case 8: return new SubAnalysisFunctionDef_Group(this, this, 8, inst);
			case 9: return new SubAnalysisFunction_Group(this, this, 9, inst);
			case 10: return new IncomingInformationDef_Group(this, this, 10, inst);
			case 11: return new OutgoingInformationDef_Group(this, this, 11, inst);
			case 12: return new InformationUsage_Group(this, this, 12, inst);
			case 13: return new InformationCreation_Group(this, this, 13, inst);
			case 14: return new AnalysisFunction_Group(this, this, 14, inst);
			case 15: return new Information_Group(this, this, 15, inst);
			case 16: return new SpecObj_Group(this, this, 16, inst);
			case 17: return new HeadingSO_Group(this, this, 17, inst);
			case 18: return new ReqPatSO_Group(this, this, 18, inst);
			case 19: return new FreeTextSO_Group(this, this, 19, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Root ****************
 *
 * //Copied from core grammar
 * Root Specification:
 * 	{Specification} specObjects+=SpecObj+
 *
 **/

// {Specification} specObjects+=SpecObj+
protected class Root_Group extends GroupToken {
	
	public Root_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Root_SpecObjectsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRootAccess().getSpecificationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Specification}
protected class Root_SpecificationAction_0 extends ActionToken  {

	public Root_SpecificationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRootAccess().getSpecificationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// specObjects+=SpecObj+
protected class Root_SpecObjectsAssignment_1 extends AssignmentToken  {
	
	public Root_SpecObjectsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootAccess().getSpecObjectsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("specObjects",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("specObjects");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSpecObjRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRootAccess().getSpecObjectsSpecObjParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Root_SpecObjectsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Root_SpecificationAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Root ****************/


/************ begin Rule RequirementPattern ****************
 *
 * //Overridden from core grammar as starting point for this grammar.
 * RequirementPattern:
 * 	(AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation) '.'?;
 *
 **/

// (AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation) '.'?
protected class RequirementPattern_Group extends GroupToken {
	
	public RequirementPattern_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequirementPattern_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationCreationAccess().getInformationCreationAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationUsageAccess().getInformationUsageAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation)
protected class RequirementPattern_Alternatives_0 extends AlternativesToken {

	public RequirementPattern_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequirementPattern_AnalysisFunctionDefParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RequirementPattern_TheAnalysisFunctionParserRuleCall_0_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RequirementPattern_FunctionalDeviceDefParserRuleCall_0_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RequirementPattern_TheFollowingInformationParserRuleCall_0_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// AnalysisFunctionDef
protected class RequirementPattern_AnalysisFunctionDefParserRuleCall_0_0 extends RuleCallToken {
	
	public RequirementPattern_AnalysisFunctionDefParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getAnalysisFunctionDefParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AnalysisFunctionDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TheAnalysisFunction
protected class RequirementPattern_TheAnalysisFunctionParserRuleCall_0_1 extends RuleCallToken {
	
	public RequirementPattern_TheAnalysisFunctionParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getTheAnalysisFunctionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheAnalysisFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TheAnalysisFunction_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FunctionalDeviceDef
protected class RequirementPattern_FunctionalDeviceDefParserRuleCall_0_2 extends RuleCallToken {
	
	public RequirementPattern_FunctionalDeviceDefParserRuleCall_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getFunctionalDeviceDefParserRuleCall_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDeviceDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FunctionalDeviceDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TheFollowingInformation
protected class RequirementPattern_TheFollowingInformationParserRuleCall_0_3 extends RuleCallToken {
	
	public RequirementPattern_TheFollowingInformationParserRuleCall_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRequirementPatternAccess().getTheFollowingInformationParserRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationCreationAccess().getInformationCreationAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationUsageAccess().getInformationUsageAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TheFollowingInformation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}



/************ end Rule RequirementPattern ****************/


/************ begin Rule TheAnalysisFunction ****************
 *
 * TheAnalysisFunction RequirementPattern:
 * 	'The function' (SubAnalysisFunctionDef | AnalysisFunctionPurp)
 *
 **/

// 'The function' (SubAnalysisFunctionDef | AnalysisFunctionPurp)
protected class TheAnalysisFunction_Group extends GroupToken {
	
	public TheAnalysisFunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTheAnalysisFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheAnalysisFunction_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'The function'
protected class TheAnalysisFunction_TheFunctionKeyword_0 extends KeywordToken  {
	
	public TheAnalysisFunction_TheFunctionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTheAnalysisFunctionAccess().getTheFunctionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (SubAnalysisFunctionDef | AnalysisFunctionPurp)
protected class TheAnalysisFunction_Alternatives_1 extends AlternativesToken {

	public TheAnalysisFunction_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTheAnalysisFunctionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheAnalysisFunction_SubAnalysisFunctionDefParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TheAnalysisFunction_AnalysisFunctionPurpParserRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// SubAnalysisFunctionDef
protected class TheAnalysisFunction_SubAnalysisFunctionDefParserRuleCall_1_0 extends RuleCallToken {
	
	public TheAnalysisFunction_SubAnalysisFunctionDefParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheAnalysisFunctionAccess().getSubAnalysisFunctionDefParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunctionDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SubAnalysisFunctionDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheAnalysisFunction_TheFunctionKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// AnalysisFunctionPurp
protected class TheAnalysisFunction_AnalysisFunctionPurpParserRuleCall_1_1 extends RuleCallToken {
	
	public TheAnalysisFunction_AnalysisFunctionPurpParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheAnalysisFunctionAccess().getAnalysisFunctionPurpParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionPurp_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AnalysisFunctionPurp_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheAnalysisFunction_TheFunctionKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule TheAnalysisFunction ****************/


/************ begin Rule TheFollowingInformation ****************
 *
 * TheFollowingInformation RequirementPattern:
 * 	'The following information' (IncomingInformationDef | OutgoingInformationDef | InformationUsage |
 * 	InformationCreation)
 *
 **/

// 'The following information' (IncomingInformationDef | OutgoingInformationDef | InformationUsage | InformationCreation)
protected class TheFollowingInformation_Group extends GroupToken {
	
	public TheFollowingInformation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationCreationAccess().getInformationCreationAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInformationUsageAccess().getInformationUsageAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'The following information'
protected class TheFollowingInformation_TheFollowingInformationKeyword_0 extends KeywordToken  {
	
	public TheFollowingInformation_TheFollowingInformationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getTheFollowingInformationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (IncomingInformationDef | OutgoingInformationDef | InformationUsage | InformationCreation)
protected class TheFollowingInformation_Alternatives_1 extends AlternativesToken {

	public TheFollowingInformation_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_IncomingInformationDefParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TheFollowingInformation_OutgoingInformationDefParserRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TheFollowingInformation_InformationUsageParserRuleCall_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new TheFollowingInformation_InformationCreationParserRuleCall_1_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// IncomingInformationDef
protected class TheFollowingInformation_IncomingInformationDefParserRuleCall_1_0 extends RuleCallToken {
	
	public TheFollowingInformation_IncomingInformationDefParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getIncomingInformationDefParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IncomingInformationDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_TheFollowingInformationKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// OutgoingInformationDef
protected class TheFollowingInformation_OutgoingInformationDefParserRuleCall_1_1 extends RuleCallToken {
	
	public TheFollowingInformation_OutgoingInformationDefParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getOutgoingInformationDefParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OutgoingInformationDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_TheFollowingInformationKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// InformationUsage
protected class TheFollowingInformation_InformationUsageParserRuleCall_1_2 extends RuleCallToken {
	
	public TheFollowingInformation_InformationUsageParserRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getInformationUsageParserRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInformationUsageAccess().getInformationUsageAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(InformationUsage_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_TheFollowingInformationKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// InformationCreation
protected class TheFollowingInformation_InformationCreationParserRuleCall_1_3 extends RuleCallToken {
	
	public TheFollowingInformation_InformationCreationParserRuleCall_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTheFollowingInformationAccess().getInformationCreationParserRuleCall_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInformationCreationAccess().getInformationCreationAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(InformationCreation_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TheFollowingInformation_TheFollowingInformationKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule TheFollowingInformation ****************/


/************ begin Rule AnalysisFunctionDef ****************
 *
 * AnalysisFunctionDef AnalysisFunctionDefinition:
 * 	{AnalysisFunctionDefinition}
 * 	'The top-level function is called'
 * 	analysisFunction=AnalysisFunction
 *
 **/

// {AnalysisFunctionDefinition} 'The top-level function is called' analysisFunction=AnalysisFunction
protected class AnalysisFunctionDef_Group extends GroupToken {
	
	public AnalysisFunctionDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnalysisFunctionDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionDef_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AnalysisFunctionDefinition}
protected class AnalysisFunctionDef_AnalysisFunctionDefinitionAction_0 extends ActionToken  {

	public AnalysisFunctionDef_AnalysisFunctionDefinitionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// 'The top-level function is called'
protected class AnalysisFunctionDef_TheTopLevelFunctionIsCalledKeyword_1 extends KeywordToken  {
	
	public AnalysisFunctionDef_TheTopLevelFunctionIsCalledKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnalysisFunctionDefAccess().getTheTopLevelFunctionIsCalledKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionDef_AnalysisFunctionDefinitionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// analysisFunction=AnalysisFunction
protected class AnalysisFunctionDef_AnalysisFunctionAssignment_2 extends AssignmentToken  {
	
	public AnalysisFunctionDef_AnalysisFunctionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnalysisFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnalysisFunctionDefAccess().getAnalysisFunctionAnalysisFunctionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnalysisFunctionDef_TheTopLevelFunctionIsCalledKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AnalysisFunctionDef ****************/


/************ begin Rule AnalysisFunctionPurp ****************
 *
 * AnalysisFunctionPurp AnalysisFunctionPurpose:
 * 	{AnalysisFunctionPurpose} analysisFunction=[AnalysisFunction] 'has the following purpose:' purpose=STRING
 *
 **/

// {AnalysisFunctionPurpose} analysisFunction=[AnalysisFunction] 'has the following purpose:' purpose=STRING
protected class AnalysisFunctionPurp_Group extends GroupToken {
	
	public AnalysisFunctionPurp_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnalysisFunctionPurpAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionPurp_PurposeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AnalysisFunctionPurpose}
protected class AnalysisFunctionPurp_AnalysisFunctionPurposeAction_0 extends ActionToken  {

	public AnalysisFunctionPurp_AnalysisFunctionPurposeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionPurposeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //'The function'
// analysisFunction=[AnalysisFunction]
protected class AnalysisFunctionPurp_AnalysisFunctionAssignment_1 extends AssignmentToken  {
	
	public AnalysisFunctionPurp_AnalysisFunctionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionPurp_AnalysisFunctionPurposeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionAnalysisFunctionCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getAnalysisFunctionPurpAccess().getAnalysisFunctionAnalysisFunctionCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// 'has the following purpose:'
protected class AnalysisFunctionPurp_HasTheFollowingPurposeKeyword_2 extends KeywordToken  {
	
	public AnalysisFunctionPurp_HasTheFollowingPurposeKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnalysisFunctionPurpAccess().getHasTheFollowingPurposeKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionPurp_AnalysisFunctionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// purpose=STRING
protected class AnalysisFunctionPurp_PurposeAssignment_3 extends AssignmentToken  {
	
	public AnalysisFunctionPurp_PurposeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnalysisFunctionPurpAccess().getPurposeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunctionPurp_HasTheFollowingPurposeKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("purpose",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("purpose");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnalysisFunctionPurpAccess().getPurposeSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnalysisFunctionPurpAccess().getPurposeSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AnalysisFunctionPurp ****************/


/************ begin Rule FunctionalDeviceDef ****************
 *
 * FunctionalDeviceDef FunctionalDeviceDefinition:
 * 	{FunctionalDeviceDefinition}
 * 	'The functional device' functionalDevice=FunctionalDevice
 *
 **/

// {FunctionalDeviceDefinition} 'The functional device' functionalDevice=FunctionalDevice
protected class FunctionalDeviceDef_Group extends GroupToken {
	
	public FunctionalDeviceDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionalDeviceDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDeviceDef_FunctionalDeviceAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FunctionalDeviceDefinition}
protected class FunctionalDeviceDef_FunctionalDeviceDefinitionAction_0 extends ActionToken  {

	public FunctionalDeviceDef_FunctionalDeviceDefinitionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// 'The functional device'
protected class FunctionalDeviceDef_TheFunctionalDeviceKeyword_1 extends KeywordToken  {
	
	public FunctionalDeviceDef_TheFunctionalDeviceKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionalDeviceDefAccess().getTheFunctionalDeviceKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDeviceDef_FunctionalDeviceDefinitionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// functionalDevice=FunctionalDevice
protected class FunctionalDeviceDef_FunctionalDeviceAssignment_2 extends AssignmentToken  {
	
	public FunctionalDeviceDef_FunctionalDeviceAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDevice_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("functionalDevice",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("functionalDevice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFunctionalDeviceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFunctionalDeviceDefAccess().getFunctionalDeviceFunctionalDeviceParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FunctionalDeviceDef_TheFunctionalDeviceKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FunctionalDeviceDef ****************/


/************ begin Rule FunctionalDevice ****************
 *
 * FunctionalDevice:
 * 	{FunctionalDevice} name=ID 'has the following purpose:' purpose=STRING;
 *
 **/

// {FunctionalDevice} name=ID 'has the following purpose:' purpose=STRING
protected class FunctionalDevice_Group extends GroupToken {
	
	public FunctionalDevice_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFunctionalDeviceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDevice_PurposeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFunctionalDeviceAccess().getFunctionalDeviceAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FunctionalDevice}
protected class FunctionalDevice_FunctionalDeviceAction_0 extends ActionToken  {

	public FunctionalDevice_FunctionalDeviceAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFunctionalDeviceAccess().getFunctionalDeviceAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class FunctionalDevice_NameAssignment_1 extends AssignmentToken  {
	
	public FunctionalDevice_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionalDeviceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDevice_FunctionalDeviceAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionalDeviceAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunctionalDeviceAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// 'has the following purpose:'
protected class FunctionalDevice_HasTheFollowingPurposeKeyword_2 extends KeywordToken  {
	
	public FunctionalDevice_HasTheFollowingPurposeKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFunctionalDeviceAccess().getHasTheFollowingPurposeKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDevice_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// purpose=STRING
protected class FunctionalDevice_PurposeAssignment_3 extends AssignmentToken  {
	
	public FunctionalDevice_PurposeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFunctionalDeviceAccess().getPurposeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FunctionalDevice_HasTheFollowingPurposeKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("purpose",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("purpose");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFunctionalDeviceAccess().getPurposeSTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFunctionalDeviceAccess().getPurposeSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FunctionalDevice ****************/


/************ begin Rule SubAnalysisFunctionDef ****************
 *
 * SubAnalysisFunctionDef SubAnalysisFunctionDefinition:
 * 	{SubAnalysisFunctionDefinition} analysisFunction=SubAnalysisFunction
 *
 **/

// {SubAnalysisFunctionDefinition} analysisFunction=SubAnalysisFunction
protected class SubAnalysisFunctionDef_Group extends GroupToken {
	
	public SubAnalysisFunctionDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunctionDef_AnalysisFunctionAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SubAnalysisFunctionDefinition}
protected class SubAnalysisFunctionDef_SubAnalysisFunctionDefinitionAction_0 extends ActionToken  {

	public SubAnalysisFunctionDef_SubAnalysisFunctionDefinitionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionDefAccess().getSubAnalysisFunctionDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //'The function'
// analysisFunction=SubAnalysisFunction
protected class SubAnalysisFunctionDef_AnalysisFunctionAssignment_1 extends AssignmentToken  {
	
	public SubAnalysisFunctionDef_AnalysisFunctionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionDefAccess().getAnalysisFunctionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubAnalysisFunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSubAnalysisFunctionDefAccess().getAnalysisFunctionSubAnalysisFunctionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SubAnalysisFunctionDef_SubAnalysisFunctionDefinitionAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SubAnalysisFunctionDef ****************/


/************ begin Rule SubAnalysisFunction ****************
 *
 * SubAnalysisFunction AnalysisFunction:
 * 	{AnalysisFunction} name=ID 'is a subfunction of the function' parentAnalysisFunction=[AnalysisFunction]
 *
 **/

// {AnalysisFunction} name=ID 'is a subfunction of the function' parentAnalysisFunction=[AnalysisFunction]
protected class SubAnalysisFunction_Group extends GroupToken {
	
	public SubAnalysisFunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunction_ParentAnalysisFunctionAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSubAnalysisFunctionAccess().getAnalysisFunctionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AnalysisFunction}
protected class SubAnalysisFunction_AnalysisFunctionAction_0 extends ActionToken  {

	public SubAnalysisFunction_AnalysisFunctionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionAccess().getAnalysisFunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class SubAnalysisFunction_NameAssignment_1 extends AssignmentToken  {
	
	public SubAnalysisFunction_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunction_AnalysisFunctionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSubAnalysisFunctionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSubAnalysisFunctionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// 'is a subfunction of the function'
protected class SubAnalysisFunction_IsASubfunctionOfTheFunctionKeyword_2 extends KeywordToken  {
	
	public SubAnalysisFunction_IsASubfunctionOfTheFunctionKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionAccess().getIsASubfunctionOfTheFunctionKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunction_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parentAnalysisFunction=[AnalysisFunction]
protected class SubAnalysisFunction_ParentAnalysisFunctionAssignment_3 extends AssignmentToken  {
	
	public SubAnalysisFunction_ParentAnalysisFunctionAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSubAnalysisFunctionAccess().getParentAnalysisFunctionAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SubAnalysisFunction_IsASubfunctionOfTheFunctionKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parentAnalysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parentAnalysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSubAnalysisFunctionAccess().getParentAnalysisFunctionAnalysisFunctionCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSubAnalysisFunctionAccess().getParentAnalysisFunctionAnalysisFunctionCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule SubAnalysisFunction ****************/


/************ begin Rule IncomingInformationDef ****************
 *
 * IncomingInformationDef IncomingInformationDefinition:
 * 	{IncomingInformationDefinition}
 * 	//	'The following information'
 * 	'is received by the function' analysisFunction=[AnalysisFunction] ('from the functional device'
 * 	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
 * 	informationList+=Information)*
 *
 **/

// {IncomingInformationDefinition} //	'The following information'
// 'is received by the function' analysisFunction=[AnalysisFunction] ('from the functional device'
// functionalDevice=[FunctionalDevice])? ':' informationList+=Information (',' informationList+=Information)*
protected class IncomingInformationDef_Group extends GroupToken {
	
	public IncomingInformationDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IncomingInformationDef_InformationListAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IncomingInformationDefinition}
protected class IncomingInformationDef_IncomingInformationDefinitionAction_0 extends ActionToken  {

	public IncomingInformationDef_IncomingInformationDefinitionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getIncomingInformationDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //	'The following information'
// 'is received by the function'
protected class IncomingInformationDef_IsReceivedByTheFunctionKeyword_1 extends KeywordToken  {
	
	public IncomingInformationDef_IsReceivedByTheFunctionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getIsReceivedByTheFunctionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_IncomingInformationDefinitionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// analysisFunction=[AnalysisFunction]
protected class IncomingInformationDef_AnalysisFunctionAssignment_2 extends AssignmentToken  {
	
	public IncomingInformationDef_AnalysisFunctionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getAnalysisFunctionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_IsReceivedByTheFunctionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIncomingInformationDefAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getIncomingInformationDefAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ('from the functional device' functionalDevice=[FunctionalDevice])?
protected class IncomingInformationDef_Group_3 extends GroupToken {
	
	public IncomingInformationDef_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_FunctionalDeviceAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'from the functional device'
protected class IncomingInformationDef_FromTheFunctionalDeviceKeyword_3_0 extends KeywordToken  {
	
	public IncomingInformationDef_FromTheFunctionalDeviceKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getFromTheFunctionalDeviceKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// functionalDevice=[FunctionalDevice]
protected class IncomingInformationDef_FunctionalDeviceAssignment_3_1 extends AssignmentToken  {
	
	public IncomingInformationDef_FunctionalDeviceAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getFunctionalDeviceAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_FromTheFunctionalDeviceKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("functionalDevice",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("functionalDevice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIncomingInformationDefAccess().getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getIncomingInformationDefAccess().getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ':'
protected class IncomingInformationDef_ColonKeyword_4 extends KeywordToken  {
	
	public IncomingInformationDef_ColonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IncomingInformationDef_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=Information
protected class IncomingInformationDef_InformationListAssignment_5 extends AssignmentToken  {
	
	public IncomingInformationDef_InformationListAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getInformationListAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIncomingInformationDefAccess().getInformationListInformationParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IncomingInformationDef_ColonKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (',' informationList+=Information)*
protected class IncomingInformationDef_Group_6 extends GroupToken {
	
	public IncomingInformationDef_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_InformationListAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ','
protected class IncomingInformationDef_CommaKeyword_6_0 extends KeywordToken  {
	
	public IncomingInformationDef_CommaKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getCommaKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IncomingInformationDef_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IncomingInformationDef_InformationListAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=Information
protected class IncomingInformationDef_InformationListAssignment_6_1 extends AssignmentToken  {
	
	public IncomingInformationDef_InformationListAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIncomingInformationDefAccess().getInformationListAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIncomingInformationDefAccess().getInformationListInformationParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IncomingInformationDef_CommaKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule IncomingInformationDef ****************/


/************ begin Rule OutgoingInformationDef ****************
 *
 * OutgoingInformationDef OutgoingInformationDefinition:
 * 	{OutgoingInformationDefinition}
 * 	//	'The following information'
 * 	'is sent from the function' analysisFunction=[AnalysisFunction] ('to the functional device'
 * 	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
 * 	informationList+=Information)*
 *
 **/

// {OutgoingInformationDefinition} //	'The following information'
// 'is sent from the function' analysisFunction=[AnalysisFunction] ('to the functional device'
// functionalDevice=[FunctionalDevice])? ':' informationList+=Information (',' informationList+=Information)*
protected class OutgoingInformationDef_Group extends GroupToken {
	
	public OutgoingInformationDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OutgoingInformationDef_InformationListAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OutgoingInformationDefinition}
protected class OutgoingInformationDef_OutgoingInformationDefinitionAction_0 extends ActionToken  {

	public OutgoingInformationDef_OutgoingInformationDefinitionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getOutgoingInformationDefinitionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //	'The following information'
// 'is sent from the function'
protected class OutgoingInformationDef_IsSentFromTheFunctionKeyword_1 extends KeywordToken  {
	
	public OutgoingInformationDef_IsSentFromTheFunctionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getIsSentFromTheFunctionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_OutgoingInformationDefinitionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// analysisFunction=[AnalysisFunction]
protected class OutgoingInformationDef_AnalysisFunctionAssignment_2 extends AssignmentToken  {
	
	public OutgoingInformationDef_AnalysisFunctionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getAnalysisFunctionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_IsSentFromTheFunctionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOutgoingInformationDefAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getOutgoingInformationDefAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ('to the functional device' functionalDevice=[FunctionalDevice])?
protected class OutgoingInformationDef_Group_3 extends GroupToken {
	
	public OutgoingInformationDef_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_FunctionalDeviceAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'to the functional device'
protected class OutgoingInformationDef_ToTheFunctionalDeviceKeyword_3_0 extends KeywordToken  {
	
	public OutgoingInformationDef_ToTheFunctionalDeviceKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getToTheFunctionalDeviceKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// functionalDevice=[FunctionalDevice]
protected class OutgoingInformationDef_FunctionalDeviceAssignment_3_1 extends AssignmentToken  {
	
	public OutgoingInformationDef_FunctionalDeviceAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getFunctionalDeviceAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_ToTheFunctionalDeviceKeyword_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("functionalDevice",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("functionalDevice");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOutgoingInformationDefAccess().getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getOutgoingInformationDefAccess().getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ':'
protected class OutgoingInformationDef_ColonKeyword_4 extends KeywordToken  {
	
	public OutgoingInformationDef_ColonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OutgoingInformationDef_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=Information
protected class OutgoingInformationDef_InformationListAssignment_5 extends AssignmentToken  {
	
	public OutgoingInformationDef_InformationListAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getInformationListAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOutgoingInformationDefAccess().getInformationListInformationParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OutgoingInformationDef_ColonKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (',' informationList+=Information)*
protected class OutgoingInformationDef_Group_6 extends GroupToken {
	
	public OutgoingInformationDef_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_InformationListAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ','
protected class OutgoingInformationDef_CommaKeyword_6_0 extends KeywordToken  {
	
	public OutgoingInformationDef_CommaKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getCommaKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OutgoingInformationDef_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OutgoingInformationDef_InformationListAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=Information
protected class OutgoingInformationDef_InformationListAssignment_6_1 extends AssignmentToken  {
	
	public OutgoingInformationDef_InformationListAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOutgoingInformationDefAccess().getInformationListAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOutgoingInformationDefAccess().getInformationListInformationParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OutgoingInformationDef_CommaKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OutgoingInformationDef ****************/


/************ begin Rule InformationUsage ****************
 *
 * InformationUsage:
 * 	{InformationUsage}
 * 	//	'The following information'
 * 	'is used by the function' analysisFunction=[AnalysisFunction] ':'
 * 	informationList+=[Information] (',' informationList+=[Information])*;
 *
 **/

// {InformationUsage} //	'The following information'
// 'is used by the function' analysisFunction=[AnalysisFunction] ':' informationList+=[Information] (','
// informationList+=[Information])*
protected class InformationUsage_Group extends GroupToken {
	
	public InformationUsage_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InformationUsage_InformationListAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInformationUsageAccess().getInformationUsageAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InformationUsage}
protected class InformationUsage_InformationUsageAction_0 extends ActionToken  {

	public InformationUsage_InformationUsageAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getInformationUsageAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //	'The following information'
// 'is used by the function'
protected class InformationUsage_IsUsedByTheFunctionKeyword_1 extends KeywordToken  {
	
	public InformationUsage_IsUsedByTheFunctionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getIsUsedByTheFunctionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_InformationUsageAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// analysisFunction=[AnalysisFunction]
protected class InformationUsage_AnalysisFunctionAssignment_2 extends AssignmentToken  {
	
	public InformationUsage_AnalysisFunctionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getAnalysisFunctionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_IsUsedByTheFunctionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationUsageAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationUsageAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ':'
protected class InformationUsage_ColonKeyword_3 extends KeywordToken  {
	
	public InformationUsage_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// informationList+=[Information]
protected class InformationUsage_InformationListAssignment_4 extends AssignmentToken  {
	
	public InformationUsage_InformationListAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getInformationListAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_ColonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationUsageAccess().getInformationListInformationCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationUsageAccess().getInformationListInformationCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (',' informationList+=[Information])*
protected class InformationUsage_Group_5 extends GroupToken {
	
	public InformationUsage_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_InformationListAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ','
protected class InformationUsage_CommaKeyword_5_0 extends KeywordToken  {
	
	public InformationUsage_CommaKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getCommaKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InformationUsage_InformationListAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=[Information]
protected class InformationUsage_InformationListAssignment_5_1 extends AssignmentToken  {
	
	public InformationUsage_InformationListAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationUsageAccess().getInformationListAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationUsage_CommaKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationUsageAccess().getInformationListInformationCrossReference_5_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationUsageAccess().getInformationListInformationCrossReference_5_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule InformationUsage ****************/


/************ begin Rule InformationCreation ****************
 *
 * InformationCreation:
 * 	{InformationCreation}
 * 	//	'The following information'
 * 	'is created by the function' analysisFunction=[AnalysisFunction] ':'
 * 	informationList+=[Information] (',' informationList+=[Information])*;
 *
 **/

// {InformationCreation} //	'The following information'
// 'is created by the function' analysisFunction=[AnalysisFunction] ':' informationList+=[Information] (','
// informationList+=[Information])*
protected class InformationCreation_Group extends GroupToken {
	
	public InformationCreation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InformationCreation_InformationListAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInformationCreationAccess().getInformationCreationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {InformationCreation}
protected class InformationCreation_InformationCreationAction_0 extends ActionToken  {

	public InformationCreation_InformationCreationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getInformationCreationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// //	'The following information'
// 'is created by the function'
protected class InformationCreation_IsCreatedByTheFunctionKeyword_1 extends KeywordToken  {
	
	public InformationCreation_IsCreatedByTheFunctionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getIsCreatedByTheFunctionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_InformationCreationAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// analysisFunction=[AnalysisFunction]
protected class InformationCreation_AnalysisFunctionAssignment_2 extends AssignmentToken  {
	
	public InformationCreation_AnalysisFunctionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getAnalysisFunctionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_IsCreatedByTheFunctionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("analysisFunction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("analysisFunction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationCreationAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationCreationAccess().getAnalysisFunctionAnalysisFunctionCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ':'
protected class InformationCreation_ColonKeyword_3 extends KeywordToken  {
	
	public InformationCreation_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_AnalysisFunctionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// informationList+=[Information]
protected class InformationCreation_InformationListAssignment_4 extends AssignmentToken  {
	
	public InformationCreation_InformationListAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getInformationListAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_ColonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationCreationAccess().getInformationListInformationCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationCreationAccess().getInformationListInformationCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// (',' informationList+=[Information])*
protected class InformationCreation_Group_5 extends GroupToken {
	
	public InformationCreation_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_InformationListAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ','
protected class InformationCreation_CommaKeyword_5_0 extends KeywordToken  {
	
	public InformationCreation_CommaKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getCommaKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InformationCreation_InformationListAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// informationList+=[Information]
protected class InformationCreation_InformationListAssignment_5_1 extends AssignmentToken  {
	
	public InformationCreation_InformationListAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationCreationAccess().getInformationListAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InformationCreation_CommaKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("informationList",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("informationList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInformationCreationAccess().getInformationListInformationCrossReference_5_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getInformationCreationAccess().getInformationListInformationCrossReference_5_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule InformationCreation ****************/


/************ begin Rule AnalysisFunction ****************
 *
 * AnalysisFunction:
 * 	{AnalysisFunction} name=ID;
 *
 **/

// {AnalysisFunction} name=ID
protected class AnalysisFunction_Group extends GroupToken {
	
	public AnalysisFunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnalysisFunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunction_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnalysisFunctionAccess().getAnalysisFunctionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AnalysisFunction}
protected class AnalysisFunction_AnalysisFunctionAction_0 extends ActionToken  {

	public AnalysisFunction_AnalysisFunctionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAnalysisFunctionAccess().getAnalysisFunctionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class AnalysisFunction_NameAssignment_1 extends AssignmentToken  {
	
	public AnalysisFunction_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnalysisFunctionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnalysisFunction_AnalysisFunctionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnalysisFunctionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnalysisFunctionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AnalysisFunction ****************/


/************ begin Rule Information ****************
 *
 * Information:
 * 	{Information} name=ID;
 *
 **/

// {Information} name=ID
protected class Information_Group extends GroupToken {
	
	public Information_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInformationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInformationAccess().getInformationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Information}
protected class Information_InformationAction_0 extends ActionToken  {

	public Information_InformationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInformationAccess().getInformationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class Information_NameAssignment_1 extends AssignmentToken  {
	
	public Information_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInformationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Information_InformationAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInformationAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInformationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Information ****************/


/************ begin Rule SpecObj ****************
 *
 * SpecObj SpecObject:
 * 	SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT
 *
 **/

// SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT
protected class SpecObj_Group extends GroupToken {
	
	public SpecObj_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_SPECOBJECTDELIMITERRIGHTTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFreeTextSOAccess().getFreeTextSpecObjectAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHeadingSOAccess().getHeadingSpecObjectAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReqPatSOAccess().getRequirementPatternSpecObjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SPECOBJECTDELIMITERLEFT
protected class SpecObj_SPECOBJECTDELIMITERLEFTTerminalRuleCall_0 extends UnassignedTextToken {

	public SpecObj_SPECOBJECTDELIMITERLEFTTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getSPECOBJECTDELIMITERLEFTTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// (HeadingSO | ReqPatSO | FreeTextSO)
protected class SpecObj_Alternatives_1 extends AlternativesToken {

	public SpecObj_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_HeadingSOParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpecObj_ReqPatSOParserRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SpecObj_FreeTextSOParserRuleCall_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// HeadingSO
protected class SpecObj_HeadingSOParserRuleCall_1_0 extends RuleCallToken {
	
	public SpecObj_HeadingSOParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getHeadingSOParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHeadingSOAccess().getHeadingSpecObjectAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(HeadingSO_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_SPECOBJECTDELIMITERLEFTTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ReqPatSO
protected class SpecObj_ReqPatSOParserRuleCall_1_1 extends RuleCallToken {
	
	public SpecObj_ReqPatSOParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getReqPatSOParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReqPatSOAccess().getRequirementPatternSpecObjectAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ReqPatSO_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_SPECOBJECTDELIMITERLEFTTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// FreeTextSO
protected class SpecObj_FreeTextSOParserRuleCall_1_2 extends RuleCallToken {
	
	public SpecObj_FreeTextSOParserRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getFreeTextSOParserRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFreeTextSOAccess().getFreeTextSpecObjectAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FreeTextSO_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_SPECOBJECTDELIMITERLEFTTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// SPECOBJECTDELIMITERRIGHT
protected class SpecObj_SPECOBJECTDELIMITERRIGHTTerminalRuleCall_2 extends UnassignedTextToken {

	public SpecObj_SPECOBJECTDELIMITERRIGHTTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSpecObjAccess().getSPECOBJECTDELIMITERRIGHTTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecObj_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SpecObj ****************/


/************ begin Rule HeadingSO ****************
 *
 * HeadingSO HeadingSpecObject:
 * 	{HeadingSpecObject} PARAMDELIMITERLEFT 'H' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
 * 	(PARAMDELIMITERLEFT
 * 	parent=STRING PARAMDELIMITERRIGHT)?
 * 	text=STRING
 *
 **/

// {HeadingSpecObject} PARAMDELIMITERLEFT 'H' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? text=STRING
protected class HeadingSO_Group extends GroupToken {
	
	public HeadingSO_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_TextAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHeadingSOAccess().getHeadingSpecObjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {HeadingSpecObject}
protected class HeadingSO_HeadingSpecObjectAction_0 extends ActionToken  {

	public HeadingSO_HeadingSpecObjectAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getHeadingSpecObjectAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// PARAMDELIMITERLEFT
protected class HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_1 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_HeadingSpecObjectAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'H'
protected class HeadingSO_HKeyword_2 extends KeywordToken  {
	
	public HeadingSO_HKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getHKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERRIGHT
protected class HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_3 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_HKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_4 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// id=ID
protected class HeadingSO_IdAssignment_5 extends AssignmentToken  {
	
	public HeadingSO_IdAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getIdAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHeadingSOAccess().getIdIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getHeadingSOAccess().getIdIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_6 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_IdAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
protected class HeadingSO_Group_7 extends GroupToken {
	
	public HeadingSO_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parent=STRING
protected class HeadingSO_ParentAssignment_7_1 extends AssignmentToken  {
	
	public HeadingSO_ParentAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getParentAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parent");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHeadingSOAccess().getParentSTRINGTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getHeadingSOAccess().getParentSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2 extends UnassignedTextToken {

	public HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_ParentAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// text=STRING
protected class HeadingSO_TextAssignment_8 extends AssignmentToken  {
	
	public HeadingSO_TextAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHeadingSOAccess().getTextAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new HeadingSO_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new HeadingSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHeadingSOAccess().getTextSTRINGTerminalRuleCall_8_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getHeadingSOAccess().getTextSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule HeadingSO ****************/


/************ begin Rule ReqPatSO ****************
 *
 * ReqPatSO RequirementPatternSpecObject:
 * 	{RequirementPatternSpecObject} PARAMDELIMITERLEFT 'RP' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID
 * 	PARAMDELIMITERRIGHT (PARAMDELIMITERLEFT
 * 	parent=STRING PARAMDELIMITERRIGHT)?
 * 	requirementPatterns+=super::RequirementPattern+
 *
 **/

// {RequirementPatternSpecObject} PARAMDELIMITERLEFT 'RP' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? requirementPatterns+=super::RequirementPattern+
protected class ReqPatSO_Group extends GroupToken {
	
	public ReqPatSO_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_RequirementPatternsAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReqPatSOAccess().getRequirementPatternSpecObjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RequirementPatternSpecObject}
protected class ReqPatSO_RequirementPatternSpecObjectAction_0 extends ActionToken  {

	public ReqPatSO_RequirementPatternSpecObjectAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getRequirementPatternSpecObjectAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// PARAMDELIMITERLEFT
protected class ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_1 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_RequirementPatternSpecObjectAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'RP'
protected class ReqPatSO_RPKeyword_2 extends KeywordToken  {
	
	public ReqPatSO_RPKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getRPKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERRIGHT
protected class ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_3 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_RPKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_4 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// id=ID
protected class ReqPatSO_IdAssignment_5 extends AssignmentToken  {
	
	public ReqPatSO_IdAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getIdAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReqPatSOAccess().getIdIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReqPatSOAccess().getIdIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_6 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_IdAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
protected class ReqPatSO_Group_7 extends GroupToken {
	
	public ReqPatSO_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parent=STRING
protected class ReqPatSO_ParentAssignment_7_1 extends AssignmentToken  {
	
	public ReqPatSO_ParentAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getParentAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parent");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReqPatSOAccess().getParentSTRINGTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReqPatSOAccess().getParentSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2 extends UnassignedTextToken {

	public ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReqPatSO_ParentAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// requirementPatterns+=super::RequirementPattern+
protected class ReqPatSO_RequirementPatternsAssignment_8 extends AssignmentToken  {
	
	public ReqPatSO_RequirementPatternsAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReqPatSOAccess().getRequirementPatternsAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RequirementPattern_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("requirementPatterns",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("requirementPatterns");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRequirementPatternRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReqPatSOAccess().getRequirementPatternsRequirementPatternParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReqPatSO_RequirementPatternsAssignment_8(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReqPatSO_Group_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ReqPatSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ReqPatSO ****************/


/************ begin Rule FreeTextSO ****************
 *
 * FreeTextSO FreeTextSpecObject:
 * 	{FreeTextSpecObject} PARAMDELIMITERLEFT 'F' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
 * 	(PARAMDELIMITERLEFT
 * 	parent=STRING PARAMDELIMITERRIGHT)?
 * 	freeText=STRING?
 *
 **/

// {FreeTextSpecObject} PARAMDELIMITERLEFT 'F' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)? freeText=STRING?
protected class FreeTextSO_Group extends GroupToken {
	
	public FreeTextSO_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_FreeTextAssignment_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FreeTextSO_Group_7(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFreeTextSOAccess().getFreeTextSpecObjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FreeTextSpecObject}
protected class FreeTextSO_FreeTextSpecObjectAction_0 extends ActionToken  {

	public FreeTextSO_FreeTextSpecObjectAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getFreeTextSpecObjectAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// PARAMDELIMITERLEFT
protected class FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_1 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_FreeTextSpecObjectAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'F'
protected class FreeTextSO_FKeyword_2 extends KeywordToken  {
	
	public FreeTextSO_FKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getFKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERRIGHT
protected class FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_3 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_FKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_4 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// id=ID
protected class FreeTextSO_IdAssignment_5 extends AssignmentToken  {
	
	public FreeTextSO_IdAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getIdAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("id",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("id");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFreeTextSOAccess().getIdIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFreeTextSOAccess().getIdIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_6 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_IdAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (PARAMDELIMITERLEFT parent=STRING PARAMDELIMITERRIGHT)?
protected class FreeTextSO_Group_7 extends GroupToken {
	
	public FreeTextSO_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// PARAMDELIMITERLEFT
protected class FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERLEFTTerminalRuleCall_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parent=STRING
protected class FreeTextSO_ParentAssignment_7_1 extends AssignmentToken  {
	
	public FreeTextSO_ParentAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getParentAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_PARAMDELIMITERLEFTTerminalRuleCall_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parent",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parent");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFreeTextSOAccess().getParentSTRINGTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFreeTextSOAccess().getParentSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}

// PARAMDELIMITERRIGHT
protected class FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2 extends UnassignedTextToken {

	public FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getPARAMDELIMITERRIGHTTerminalRuleCall_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_ParentAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// freeText=STRING?
protected class FreeTextSO_FreeTextAssignment_8 extends AssignmentToken  {
	
	public FreeTextSO_FreeTextAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFreeTextSOAccess().getFreeTextAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FreeTextSO_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FreeTextSO_PARAMDELIMITERRIGHTTerminalRuleCall_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("freeText",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("freeText");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFreeTextSOAccess().getFreeTextSTRINGTerminalRuleCall_8_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFreeTextSOAccess().getFreeTextSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FreeTextSO ****************/

}
