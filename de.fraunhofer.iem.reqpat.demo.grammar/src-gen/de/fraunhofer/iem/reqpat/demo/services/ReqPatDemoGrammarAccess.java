/*
 * generated by Xtext
 */
package de.fraunhofer.iem.reqpat.demo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.fraunhofer.iem.reqpat.core.services.ReqPatGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReqPatDemoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecObjectsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecObjectsSpecObjParserRuleCall_1_0 = (RuleCall)cSpecObjectsAssignment_1.eContents().get(0);
		
		////Copied from core grammar
		//Root Specification:
		//	{Specification} specObjects+=SpecObj+
		@Override public ParserRule getRule() { return rule; }

		//{Specification} specObjects+=SpecObj+
		public Group getGroup() { return cGroup; }

		//{Specification}
		public Action getSpecificationAction_0() { return cSpecificationAction_0; }

		//specObjects+=SpecObj+
		public Assignment getSpecObjectsAssignment_1() { return cSpecObjectsAssignment_1; }

		//SpecObj
		public RuleCall getSpecObjectsSpecObjParserRuleCall_1_0() { return cSpecObjectsSpecObjParserRuleCall_1_0; }
	}

	public class RequirementPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.RequirementPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAnalysisFunctionDefParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTheAnalysisFunctionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFunctionalDeviceDefParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTheFollowingInformationParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////Overridden from core grammar as starting point for this grammar.
		//RequirementPattern:
		//	(AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation) '.'?;
		@Override public ParserRule getRule() { return rule; }

		//(AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation) '.'?
		public Group getGroup() { return cGroup; }

		//(AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//AnalysisFunctionDef
		public RuleCall getAnalysisFunctionDefParserRuleCall_0_0() { return cAnalysisFunctionDefParserRuleCall_0_0; }

		//TheAnalysisFunction
		public RuleCall getTheAnalysisFunctionParserRuleCall_0_1() { return cTheAnalysisFunctionParserRuleCall_0_1; }

		//FunctionalDeviceDef
		public RuleCall getFunctionalDeviceDefParserRuleCall_0_2() { return cFunctionalDeviceDefParserRuleCall_0_2; }

		//TheFollowingInformation
		public RuleCall getTheFollowingInformationParserRuleCall_0_3() { return cTheFollowingInformationParserRuleCall_0_3; }

		//'.'?
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class TheAnalysisFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.TheAnalysisFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSubAnalysisFunctionDefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAnalysisFunctionPurpParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//TheAnalysisFunction RequirementPattern:
		//	'The function' (SubAnalysisFunctionDef | AnalysisFunctionPurp)
		@Override public ParserRule getRule() { return rule; }

		//'The function' (SubAnalysisFunctionDef | AnalysisFunctionPurp)
		public Group getGroup() { return cGroup; }

		//'The function'
		public Keyword getTheFunctionKeyword_0() { return cTheFunctionKeyword_0; }

		//(SubAnalysisFunctionDef | AnalysisFunctionPurp)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//SubAnalysisFunctionDef
		public RuleCall getSubAnalysisFunctionDefParserRuleCall_1_0() { return cSubAnalysisFunctionDefParserRuleCall_1_0; }

		//AnalysisFunctionPurp
		public RuleCall getAnalysisFunctionPurpParserRuleCall_1_1() { return cAnalysisFunctionPurpParserRuleCall_1_1; }
	}

	public class TheFollowingInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.TheFollowingInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheFollowingInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIncomingInformationDefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cOutgoingInformationDefParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cInformationUsageParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cInformationCreationParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		//TheFollowingInformation RequirementPattern:
		//	'The following information' (IncomingInformationDef | OutgoingInformationDef | InformationUsage |
		//	InformationCreation)
		@Override public ParserRule getRule() { return rule; }

		//'The following information' (IncomingInformationDef | OutgoingInformationDef | InformationUsage | InformationCreation)
		public Group getGroup() { return cGroup; }

		//'The following information'
		public Keyword getTheFollowingInformationKeyword_0() { return cTheFollowingInformationKeyword_0; }

		//(IncomingInformationDef | OutgoingInformationDef | InformationUsage | InformationCreation)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//IncomingInformationDef
		public RuleCall getIncomingInformationDefParserRuleCall_1_0() { return cIncomingInformationDefParserRuleCall_1_0; }

		//OutgoingInformationDef
		public RuleCall getOutgoingInformationDefParserRuleCall_1_1() { return cOutgoingInformationDefParserRuleCall_1_1; }

		//InformationUsage
		public RuleCall getInformationUsageParserRuleCall_1_2() { return cInformationUsageParserRuleCall_1_2; }

		//InformationCreation
		public RuleCall getInformationCreationParserRuleCall_1_3() { return cInformationCreationParserRuleCall_1_3; }
	}

	public class AnalysisFunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.AnalysisFunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalysisFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheTopLevelFunctionIsCalledKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnalysisFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnalysisFunctionAnalysisFunctionParserRuleCall_2_0 = (RuleCall)cAnalysisFunctionAssignment_2.eContents().get(0);
		
		//AnalysisFunctionDef AnalysisFunctionDefinition:
		//	{AnalysisFunctionDefinition}
		//	'The top-level function is called'
		//	analysisFunction=AnalysisFunction
		@Override public ParserRule getRule() { return rule; }

		//{AnalysisFunctionDefinition} 'The top-level function is called' analysisFunction=AnalysisFunction
		public Group getGroup() { return cGroup; }

		//{AnalysisFunctionDefinition}
		public Action getAnalysisFunctionDefinitionAction_0() { return cAnalysisFunctionDefinitionAction_0; }

		//'The top-level function is called'
		public Keyword getTheTopLevelFunctionIsCalledKeyword_1() { return cTheTopLevelFunctionIsCalledKeyword_1; }

		//analysisFunction=AnalysisFunction
		public Assignment getAnalysisFunctionAssignment_2() { return cAnalysisFunctionAssignment_2; }

		//AnalysisFunction
		public RuleCall getAnalysisFunctionAnalysisFunctionParserRuleCall_2_0() { return cAnalysisFunctionAnalysisFunctionParserRuleCall_2_0; }
	}

	public class AnalysisFunctionPurpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.AnalysisFunctionPurp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalysisFunctionPurposeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnalysisFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAnalysisFunctionAnalysisFunctionCrossReference_1_0 = (CrossReference)cAnalysisFunctionAssignment_1.eContents().get(0);
		private final RuleCall cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cAnalysisFunctionAnalysisFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cHasTheFollowingPurposeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPurposeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPurposeSTRINGTerminalRuleCall_3_0 = (RuleCall)cPurposeAssignment_3.eContents().get(0);
		
		//AnalysisFunctionPurp AnalysisFunctionPurpose:
		//	{AnalysisFunctionPurpose} analysisFunction=[AnalysisFunction] 'has the following purpose:' purpose=STRING
		@Override public ParserRule getRule() { return rule; }

		//{AnalysisFunctionPurpose} analysisFunction=[AnalysisFunction] 'has the following purpose:' purpose=STRING
		public Group getGroup() { return cGroup; }

		//{AnalysisFunctionPurpose}
		public Action getAnalysisFunctionPurposeAction_0() { return cAnalysisFunctionPurposeAction_0; }

		////'The function'
		//analysisFunction=[AnalysisFunction]
		public Assignment getAnalysisFunctionAssignment_1() { return cAnalysisFunctionAssignment_1; }

		//[AnalysisFunction]
		public CrossReference getAnalysisFunctionAnalysisFunctionCrossReference_1_0() { return cAnalysisFunctionAnalysisFunctionCrossReference_1_0; }

		//ID
		public RuleCall getAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_1_0_1() { return cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_1_0_1; }

		//'has the following purpose:'
		public Keyword getHasTheFollowingPurposeKeyword_2() { return cHasTheFollowingPurposeKeyword_2; }

		//purpose=STRING
		public Assignment getPurposeAssignment_3() { return cPurposeAssignment_3; }

		//STRING
		public RuleCall getPurposeSTRINGTerminalRuleCall_3_0() { return cPurposeSTRINGTerminalRuleCall_3_0; }
	}

	public class FunctionalDeviceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.FunctionalDeviceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionalDeviceDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheFunctionalDeviceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionalDeviceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionalDeviceFunctionalDeviceParserRuleCall_2_0 = (RuleCall)cFunctionalDeviceAssignment_2.eContents().get(0);
		
		//FunctionalDeviceDef FunctionalDeviceDefinition:
		//	{FunctionalDeviceDefinition}
		//	'The functional device' functionalDevice=FunctionalDevice
		@Override public ParserRule getRule() { return rule; }

		//{FunctionalDeviceDefinition} 'The functional device' functionalDevice=FunctionalDevice
		public Group getGroup() { return cGroup; }

		//{FunctionalDeviceDefinition}
		public Action getFunctionalDeviceDefinitionAction_0() { return cFunctionalDeviceDefinitionAction_0; }

		//'The functional device'
		public Keyword getTheFunctionalDeviceKeyword_1() { return cTheFunctionalDeviceKeyword_1; }

		//functionalDevice=FunctionalDevice
		public Assignment getFunctionalDeviceAssignment_2() { return cFunctionalDeviceAssignment_2; }

		//FunctionalDevice
		public RuleCall getFunctionalDeviceFunctionalDeviceParserRuleCall_2_0() { return cFunctionalDeviceFunctionalDeviceParserRuleCall_2_0; }
	}

	public class FunctionalDeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.FunctionalDevice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionalDeviceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHasTheFollowingPurposeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPurposeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPurposeSTRINGTerminalRuleCall_3_0 = (RuleCall)cPurposeAssignment_3.eContents().get(0);
		
		//FunctionalDevice:
		//	{FunctionalDevice} name=ID 'has the following purpose:' purpose=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{FunctionalDevice} name=ID 'has the following purpose:' purpose=STRING
		public Group getGroup() { return cGroup; }

		//{FunctionalDevice}
		public Action getFunctionalDeviceAction_0() { return cFunctionalDeviceAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'has the following purpose:'
		public Keyword getHasTheFollowingPurposeKeyword_2() { return cHasTheFollowingPurposeKeyword_2; }

		//purpose=STRING
		public Assignment getPurposeAssignment_3() { return cPurposeAssignment_3; }

		//STRING
		public RuleCall getPurposeSTRINGTerminalRuleCall_3_0() { return cPurposeSTRINGTerminalRuleCall_3_0; }
	}

	public class SubAnalysisFunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.SubAnalysisFunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubAnalysisFunctionDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnalysisFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnalysisFunctionSubAnalysisFunctionParserRuleCall_1_0 = (RuleCall)cAnalysisFunctionAssignment_1.eContents().get(0);
		
		//SubAnalysisFunctionDef SubAnalysisFunctionDefinition:
		//	{SubAnalysisFunctionDefinition} analysisFunction=SubAnalysisFunction
		@Override public ParserRule getRule() { return rule; }

		//{SubAnalysisFunctionDefinition} analysisFunction=SubAnalysisFunction
		public Group getGroup() { return cGroup; }

		//{SubAnalysisFunctionDefinition}
		public Action getSubAnalysisFunctionDefinitionAction_0() { return cSubAnalysisFunctionDefinitionAction_0; }

		////'The function'
		//analysisFunction=SubAnalysisFunction
		public Assignment getAnalysisFunctionAssignment_1() { return cAnalysisFunctionAssignment_1; }

		//SubAnalysisFunction
		public RuleCall getAnalysisFunctionSubAnalysisFunctionParserRuleCall_1_0() { return cAnalysisFunctionSubAnalysisFunctionParserRuleCall_1_0; }
	}

	public class SubAnalysisFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.SubAnalysisFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalysisFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsASubfunctionOfTheFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParentAnalysisFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParentAnalysisFunctionAnalysisFunctionCrossReference_3_0 = (CrossReference)cParentAnalysisFunctionAssignment_3.eContents().get(0);
		private final RuleCall cParentAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_3_0_1 = (RuleCall)cParentAnalysisFunctionAnalysisFunctionCrossReference_3_0.eContents().get(1);
		
		//SubAnalysisFunction AnalysisFunction:
		//	{AnalysisFunction} name=ID 'is a subfunction of the function' parentAnalysisFunction=[AnalysisFunction]
		@Override public ParserRule getRule() { return rule; }

		//{AnalysisFunction} name=ID 'is a subfunction of the function' parentAnalysisFunction=[AnalysisFunction]
		public Group getGroup() { return cGroup; }

		//{AnalysisFunction}
		public Action getAnalysisFunctionAction_0() { return cAnalysisFunctionAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'is a subfunction of the function'
		public Keyword getIsASubfunctionOfTheFunctionKeyword_2() { return cIsASubfunctionOfTheFunctionKeyword_2; }

		//parentAnalysisFunction=[AnalysisFunction]
		public Assignment getParentAnalysisFunctionAssignment_3() { return cParentAnalysisFunctionAssignment_3; }

		//[AnalysisFunction]
		public CrossReference getParentAnalysisFunctionAnalysisFunctionCrossReference_3_0() { return cParentAnalysisFunctionAnalysisFunctionCrossReference_3_0; }

		//ID
		public RuleCall getParentAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_3_0_1() { return cParentAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_3_0_1; }
	}

	public class IncomingInformationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.IncomingInformationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncomingInformationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsReceivedByTheFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnalysisFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnalysisFunctionAnalysisFunctionCrossReference_2_0 = (CrossReference)cAnalysisFunctionAssignment_2.eContents().get(0);
		private final RuleCall cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cAnalysisFunctionAnalysisFunctionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromTheFunctionalDeviceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionalDeviceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0 = (CrossReference)cFunctionalDeviceAssignment_3_1.eContents().get(0);
		private final RuleCall cFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInformationListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInformationListInformationParserRuleCall_5_0 = (RuleCall)cInformationListAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInformationListAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInformationListInformationParserRuleCall_6_1_0 = (RuleCall)cInformationListAssignment_6_1.eContents().get(0);
		
		//IncomingInformationDef IncomingInformationDefinition:
		//	{IncomingInformationDefinition}
		//	//	'The following information'
		//	'is received by the function' analysisFunction=[AnalysisFunction] ('from the functional device'
		//	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
		//	informationList+=Information)*
		@Override public ParserRule getRule() { return rule; }

		//{IncomingInformationDefinition} //	'The following information'
		//'is received by the function' analysisFunction=[AnalysisFunction] ('from the functional device'
		//functionalDevice=[FunctionalDevice])? ':' informationList+=Information (',' informationList+=Information)*
		public Group getGroup() { return cGroup; }

		//{IncomingInformationDefinition}
		public Action getIncomingInformationDefinitionAction_0() { return cIncomingInformationDefinitionAction_0; }

		////	'The following information'
		//'is received by the function'
		public Keyword getIsReceivedByTheFunctionKeyword_1() { return cIsReceivedByTheFunctionKeyword_1; }

		//analysisFunction=[AnalysisFunction]
		public Assignment getAnalysisFunctionAssignment_2() { return cAnalysisFunctionAssignment_2; }

		//[AnalysisFunction]
		public CrossReference getAnalysisFunctionAnalysisFunctionCrossReference_2_0() { return cAnalysisFunctionAnalysisFunctionCrossReference_2_0; }

		//ID
		public RuleCall getAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1() { return cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1; }

		//('from the functional device' functionalDevice=[FunctionalDevice])?
		public Group getGroup_3() { return cGroup_3; }

		//'from the functional device'
		public Keyword getFromTheFunctionalDeviceKeyword_3_0() { return cFromTheFunctionalDeviceKeyword_3_0; }

		//functionalDevice=[FunctionalDevice]
		public Assignment getFunctionalDeviceAssignment_3_1() { return cFunctionalDeviceAssignment_3_1; }

		//[FunctionalDevice]
		public CrossReference getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0() { return cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0; }

		//ID
		public RuleCall getFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1() { return cFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//informationList+=Information
		public Assignment getInformationListAssignment_5() { return cInformationListAssignment_5; }

		//Information
		public RuleCall getInformationListInformationParserRuleCall_5_0() { return cInformationListInformationParserRuleCall_5_0; }

		//(',' informationList+=Information)*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//informationList+=Information
		public Assignment getInformationListAssignment_6_1() { return cInformationListAssignment_6_1; }

		//Information
		public RuleCall getInformationListInformationParserRuleCall_6_1_0() { return cInformationListInformationParserRuleCall_6_1_0; }
	}

	public class OutgoingInformationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.OutgoingInformationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutgoingInformationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsSentFromTheFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnalysisFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnalysisFunctionAnalysisFunctionCrossReference_2_0 = (CrossReference)cAnalysisFunctionAssignment_2.eContents().get(0);
		private final RuleCall cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cAnalysisFunctionAnalysisFunctionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToTheFunctionalDeviceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionalDeviceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0 = (CrossReference)cFunctionalDeviceAssignment_3_1.eContents().get(0);
		private final RuleCall cFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInformationListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInformationListInformationParserRuleCall_5_0 = (RuleCall)cInformationListAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInformationListAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInformationListInformationParserRuleCall_6_1_0 = (RuleCall)cInformationListAssignment_6_1.eContents().get(0);
		
		//OutgoingInformationDef OutgoingInformationDefinition:
		//	{OutgoingInformationDefinition}
		//	//	'The following information'
		//	'is sent from the function' analysisFunction=[AnalysisFunction] ('to the functional device'
		//	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
		//	informationList+=Information)*
		@Override public ParserRule getRule() { return rule; }

		//{OutgoingInformationDefinition} //	'The following information'
		//'is sent from the function' analysisFunction=[AnalysisFunction] ('to the functional device'
		//functionalDevice=[FunctionalDevice])? ':' informationList+=Information (',' informationList+=Information)*
		public Group getGroup() { return cGroup; }

		//{OutgoingInformationDefinition}
		public Action getOutgoingInformationDefinitionAction_0() { return cOutgoingInformationDefinitionAction_0; }

		////	'The following information'
		//'is sent from the function'
		public Keyword getIsSentFromTheFunctionKeyword_1() { return cIsSentFromTheFunctionKeyword_1; }

		//analysisFunction=[AnalysisFunction]
		public Assignment getAnalysisFunctionAssignment_2() { return cAnalysisFunctionAssignment_2; }

		//[AnalysisFunction]
		public CrossReference getAnalysisFunctionAnalysisFunctionCrossReference_2_0() { return cAnalysisFunctionAnalysisFunctionCrossReference_2_0; }

		//ID
		public RuleCall getAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1() { return cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1; }

		//('to the functional device' functionalDevice=[FunctionalDevice])?
		public Group getGroup_3() { return cGroup_3; }

		//'to the functional device'
		public Keyword getToTheFunctionalDeviceKeyword_3_0() { return cToTheFunctionalDeviceKeyword_3_0; }

		//functionalDevice=[FunctionalDevice]
		public Assignment getFunctionalDeviceAssignment_3_1() { return cFunctionalDeviceAssignment_3_1; }

		//[FunctionalDevice]
		public CrossReference getFunctionalDeviceFunctionalDeviceCrossReference_3_1_0() { return cFunctionalDeviceFunctionalDeviceCrossReference_3_1_0; }

		//ID
		public RuleCall getFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1() { return cFunctionalDeviceFunctionalDeviceIDTerminalRuleCall_3_1_0_1; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//informationList+=Information
		public Assignment getInformationListAssignment_5() { return cInformationListAssignment_5; }

		//Information
		public RuleCall getInformationListInformationParserRuleCall_5_0() { return cInformationListInformationParserRuleCall_5_0; }

		//(',' informationList+=Information)*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//informationList+=Information
		public Assignment getInformationListAssignment_6_1() { return cInformationListAssignment_6_1; }

		//Information
		public RuleCall getInformationListInformationParserRuleCall_6_1_0() { return cInformationListInformationParserRuleCall_6_1_0; }
	}

	public class InformationUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.InformationUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInformationUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsUsedByTheFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnalysisFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnalysisFunctionAnalysisFunctionCrossReference_2_0 = (CrossReference)cAnalysisFunctionAssignment_2.eContents().get(0);
		private final RuleCall cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cAnalysisFunctionAnalysisFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInformationListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInformationListInformationCrossReference_4_0 = (CrossReference)cInformationListAssignment_4.eContents().get(0);
		private final RuleCall cInformationListInformationIDTerminalRuleCall_4_0_1 = (RuleCall)cInformationListInformationCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInformationListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cInformationListInformationCrossReference_5_1_0 = (CrossReference)cInformationListAssignment_5_1.eContents().get(0);
		private final RuleCall cInformationListInformationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cInformationListInformationCrossReference_5_1_0.eContents().get(1);
		
		//InformationUsage:
		//	{InformationUsage}
		//	//	'The following information'
		//	'is used by the function' analysisFunction=[AnalysisFunction] ':'
		//	informationList+=[Information] (',' informationList+=[Information])*;
		@Override public ParserRule getRule() { return rule; }

		//{InformationUsage} //	'The following information'
		//'is used by the function' analysisFunction=[AnalysisFunction] ':' informationList+=[Information] (','
		//informationList+=[Information])*
		public Group getGroup() { return cGroup; }

		//{InformationUsage}
		public Action getInformationUsageAction_0() { return cInformationUsageAction_0; }

		////	'The following information'
		//'is used by the function'
		public Keyword getIsUsedByTheFunctionKeyword_1() { return cIsUsedByTheFunctionKeyword_1; }

		//analysisFunction=[AnalysisFunction]
		public Assignment getAnalysisFunctionAssignment_2() { return cAnalysisFunctionAssignment_2; }

		//[AnalysisFunction]
		public CrossReference getAnalysisFunctionAnalysisFunctionCrossReference_2_0() { return cAnalysisFunctionAnalysisFunctionCrossReference_2_0; }

		//ID
		public RuleCall getAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1() { return cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//informationList+=[Information]
		public Assignment getInformationListAssignment_4() { return cInformationListAssignment_4; }

		//[Information]
		public CrossReference getInformationListInformationCrossReference_4_0() { return cInformationListInformationCrossReference_4_0; }

		//ID
		public RuleCall getInformationListInformationIDTerminalRuleCall_4_0_1() { return cInformationListInformationIDTerminalRuleCall_4_0_1; }

		//(',' informationList+=[Information])*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//informationList+=[Information]
		public Assignment getInformationListAssignment_5_1() { return cInformationListAssignment_5_1; }

		//[Information]
		public CrossReference getInformationListInformationCrossReference_5_1_0() { return cInformationListInformationCrossReference_5_1_0; }

		//ID
		public RuleCall getInformationListInformationIDTerminalRuleCall_5_1_0_1() { return cInformationListInformationIDTerminalRuleCall_5_1_0_1; }
	}

	public class InformationCreationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.InformationCreation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInformationCreationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsCreatedByTheFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnalysisFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAnalysisFunctionAnalysisFunctionCrossReference_2_0 = (CrossReference)cAnalysisFunctionAssignment_2.eContents().get(0);
		private final RuleCall cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cAnalysisFunctionAnalysisFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInformationListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInformationListInformationCrossReference_4_0 = (CrossReference)cInformationListAssignment_4.eContents().get(0);
		private final RuleCall cInformationListInformationIDTerminalRuleCall_4_0_1 = (RuleCall)cInformationListInformationCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInformationListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cInformationListInformationCrossReference_5_1_0 = (CrossReference)cInformationListAssignment_5_1.eContents().get(0);
		private final RuleCall cInformationListInformationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cInformationListInformationCrossReference_5_1_0.eContents().get(1);
		
		//InformationCreation:
		//	{InformationCreation}
		//	//	'The following information'
		//	'is created by the function' analysisFunction=[AnalysisFunction] ':'
		//	informationList+=[Information] (',' informationList+=[Information])*;
		@Override public ParserRule getRule() { return rule; }

		//{InformationCreation} //	'The following information'
		//'is created by the function' analysisFunction=[AnalysisFunction] ':' informationList+=[Information] (','
		//informationList+=[Information])*
		public Group getGroup() { return cGroup; }

		//{InformationCreation}
		public Action getInformationCreationAction_0() { return cInformationCreationAction_0; }

		////	'The following information'
		//'is created by the function'
		public Keyword getIsCreatedByTheFunctionKeyword_1() { return cIsCreatedByTheFunctionKeyword_1; }

		//analysisFunction=[AnalysisFunction]
		public Assignment getAnalysisFunctionAssignment_2() { return cAnalysisFunctionAssignment_2; }

		//[AnalysisFunction]
		public CrossReference getAnalysisFunctionAnalysisFunctionCrossReference_2_0() { return cAnalysisFunctionAnalysisFunctionCrossReference_2_0; }

		//ID
		public RuleCall getAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1() { return cAnalysisFunctionAnalysisFunctionIDTerminalRuleCall_2_0_1; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//informationList+=[Information]
		public Assignment getInformationListAssignment_4() { return cInformationListAssignment_4; }

		//[Information]
		public CrossReference getInformationListInformationCrossReference_4_0() { return cInformationListInformationCrossReference_4_0; }

		//ID
		public RuleCall getInformationListInformationIDTerminalRuleCall_4_0_1() { return cInformationListInformationIDTerminalRuleCall_4_0_1; }

		//(',' informationList+=[Information])*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//informationList+=[Information]
		public Assignment getInformationListAssignment_5_1() { return cInformationListAssignment_5_1; }

		//[Information]
		public CrossReference getInformationListInformationCrossReference_5_1_0() { return cInformationListInformationCrossReference_5_1_0; }

		//ID
		public RuleCall getInformationListInformationIDTerminalRuleCall_5_1_0_1() { return cInformationListInformationIDTerminalRuleCall_5_1_0_1; }
	}

	public class AnalysisFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.AnalysisFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalysisFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnalysisFunction:
		//	{AnalysisFunction} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{AnalysisFunction} name=ID
		public Group getGroup() { return cGroup; }

		//{AnalysisFunction}
		public Action getAnalysisFunctionAction_0() { return cAnalysisFunctionAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.iem.reqpat.demo.ReqPatDemo.Information");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Information:
		//	{Information} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Information} name=ID
		public Group getGroup() { return cGroup; }

		//{Information}
		public Action getInformationAction_0() { return cInformationAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final RootElements pRoot;
	private final RequirementPatternElements pRequirementPattern;
	private final TheAnalysisFunctionElements pTheAnalysisFunction;
	private final TheFollowingInformationElements pTheFollowingInformation;
	private final AnalysisFunctionDefElements pAnalysisFunctionDef;
	private final AnalysisFunctionPurpElements pAnalysisFunctionPurp;
	private final FunctionalDeviceDefElements pFunctionalDeviceDef;
	private final FunctionalDeviceElements pFunctionalDevice;
	private final SubAnalysisFunctionDefElements pSubAnalysisFunctionDef;
	private final SubAnalysisFunctionElements pSubAnalysisFunction;
	private final IncomingInformationDefElements pIncomingInformationDef;
	private final OutgoingInformationDefElements pOutgoingInformationDef;
	private final InformationUsageElements pInformationUsage;
	private final InformationCreationElements pInformationCreation;
	private final AnalysisFunctionElements pAnalysisFunction;
	private final InformationElements pInformation;
	
	private final Grammar grammar;

	private final ReqPatGrammarAccess gaReqPat;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqPatDemoGrammarAccess(GrammarProvider grammarProvider,
		ReqPatGrammarAccess gaReqPat,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaReqPat = gaReqPat;
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pRequirementPattern = new RequirementPatternElements();
		this.pTheAnalysisFunction = new TheAnalysisFunctionElements();
		this.pTheFollowingInformation = new TheFollowingInformationElements();
		this.pAnalysisFunctionDef = new AnalysisFunctionDefElements();
		this.pAnalysisFunctionPurp = new AnalysisFunctionPurpElements();
		this.pFunctionalDeviceDef = new FunctionalDeviceDefElements();
		this.pFunctionalDevice = new FunctionalDeviceElements();
		this.pSubAnalysisFunctionDef = new SubAnalysisFunctionDefElements();
		this.pSubAnalysisFunction = new SubAnalysisFunctionElements();
		this.pIncomingInformationDef = new IncomingInformationDefElements();
		this.pOutgoingInformationDef = new OutgoingInformationDefElements();
		this.pInformationUsage = new InformationUsageElements();
		this.pInformationCreation = new InformationCreationElements();
		this.pAnalysisFunction = new AnalysisFunctionElements();
		this.pInformation = new InformationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.iem.reqpat.demo.ReqPatDemo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ReqPatGrammarAccess getReqPatGrammarAccess() {
		return gaReqPat;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Copied from core grammar
	//Root Specification:
	//	{Specification} specObjects+=SpecObj+
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	////Overridden from core grammar as starting point for this grammar.
	//RequirementPattern:
	//	(AnalysisFunctionDef | TheAnalysisFunction | FunctionalDeviceDef | TheFollowingInformation) '.'?;
	public RequirementPatternElements getRequirementPatternAccess() {
		return pRequirementPattern;
	}
	
	public ParserRule getRequirementPatternRule() {
		return getRequirementPatternAccess().getRule();
	}

	//TheAnalysisFunction RequirementPattern:
	//	'The function' (SubAnalysisFunctionDef | AnalysisFunctionPurp)
	public TheAnalysisFunctionElements getTheAnalysisFunctionAccess() {
		return pTheAnalysisFunction;
	}
	
	public ParserRule getTheAnalysisFunctionRule() {
		return getTheAnalysisFunctionAccess().getRule();
	}

	//TheFollowingInformation RequirementPattern:
	//	'The following information' (IncomingInformationDef | OutgoingInformationDef | InformationUsage |
	//	InformationCreation)
	public TheFollowingInformationElements getTheFollowingInformationAccess() {
		return pTheFollowingInformation;
	}
	
	public ParserRule getTheFollowingInformationRule() {
		return getTheFollowingInformationAccess().getRule();
	}

	//AnalysisFunctionDef AnalysisFunctionDefinition:
	//	{AnalysisFunctionDefinition}
	//	'The top-level function is called'
	//	analysisFunction=AnalysisFunction
	public AnalysisFunctionDefElements getAnalysisFunctionDefAccess() {
		return pAnalysisFunctionDef;
	}
	
	public ParserRule getAnalysisFunctionDefRule() {
		return getAnalysisFunctionDefAccess().getRule();
	}

	//AnalysisFunctionPurp AnalysisFunctionPurpose:
	//	{AnalysisFunctionPurpose} analysisFunction=[AnalysisFunction] 'has the following purpose:' purpose=STRING
	public AnalysisFunctionPurpElements getAnalysisFunctionPurpAccess() {
		return pAnalysisFunctionPurp;
	}
	
	public ParserRule getAnalysisFunctionPurpRule() {
		return getAnalysisFunctionPurpAccess().getRule();
	}

	//FunctionalDeviceDef FunctionalDeviceDefinition:
	//	{FunctionalDeviceDefinition}
	//	'The functional device' functionalDevice=FunctionalDevice
	public FunctionalDeviceDefElements getFunctionalDeviceDefAccess() {
		return pFunctionalDeviceDef;
	}
	
	public ParserRule getFunctionalDeviceDefRule() {
		return getFunctionalDeviceDefAccess().getRule();
	}

	//FunctionalDevice:
	//	{FunctionalDevice} name=ID 'has the following purpose:' purpose=STRING;
	public FunctionalDeviceElements getFunctionalDeviceAccess() {
		return pFunctionalDevice;
	}
	
	public ParserRule getFunctionalDeviceRule() {
		return getFunctionalDeviceAccess().getRule();
	}

	//SubAnalysisFunctionDef SubAnalysisFunctionDefinition:
	//	{SubAnalysisFunctionDefinition} analysisFunction=SubAnalysisFunction
	public SubAnalysisFunctionDefElements getSubAnalysisFunctionDefAccess() {
		return pSubAnalysisFunctionDef;
	}
	
	public ParserRule getSubAnalysisFunctionDefRule() {
		return getSubAnalysisFunctionDefAccess().getRule();
	}

	//SubAnalysisFunction AnalysisFunction:
	//	{AnalysisFunction} name=ID 'is a subfunction of the function' parentAnalysisFunction=[AnalysisFunction]
	public SubAnalysisFunctionElements getSubAnalysisFunctionAccess() {
		return pSubAnalysisFunction;
	}
	
	public ParserRule getSubAnalysisFunctionRule() {
		return getSubAnalysisFunctionAccess().getRule();
	}

	//IncomingInformationDef IncomingInformationDefinition:
	//	{IncomingInformationDefinition}
	//	//	'The following information'
	//	'is received by the function' analysisFunction=[AnalysisFunction] ('from the functional device'
	//	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
	//	informationList+=Information)*
	public IncomingInformationDefElements getIncomingInformationDefAccess() {
		return pIncomingInformationDef;
	}
	
	public ParserRule getIncomingInformationDefRule() {
		return getIncomingInformationDefAccess().getRule();
	}

	//OutgoingInformationDef OutgoingInformationDefinition:
	//	{OutgoingInformationDefinition}
	//	//	'The following information'
	//	'is sent from the function' analysisFunction=[AnalysisFunction] ('to the functional device'
	//	functionalDevice=[FunctionalDevice])? ':' informationList+=Information (','
	//	informationList+=Information)*
	public OutgoingInformationDefElements getOutgoingInformationDefAccess() {
		return pOutgoingInformationDef;
	}
	
	public ParserRule getOutgoingInformationDefRule() {
		return getOutgoingInformationDefAccess().getRule();
	}

	//InformationUsage:
	//	{InformationUsage}
	//	//	'The following information'
	//	'is used by the function' analysisFunction=[AnalysisFunction] ':'
	//	informationList+=[Information] (',' informationList+=[Information])*;
	public InformationUsageElements getInformationUsageAccess() {
		return pInformationUsage;
	}
	
	public ParserRule getInformationUsageRule() {
		return getInformationUsageAccess().getRule();
	}

	//InformationCreation:
	//	{InformationCreation}
	//	//	'The following information'
	//	'is created by the function' analysisFunction=[AnalysisFunction] ':'
	//	informationList+=[Information] (',' informationList+=[Information])*;
	public InformationCreationElements getInformationCreationAccess() {
		return pInformationCreation;
	}
	
	public ParserRule getInformationCreationRule() {
		return getInformationCreationAccess().getRule();
	}

	//AnalysisFunction:
	//	{AnalysisFunction} name=ID;
	public AnalysisFunctionElements getAnalysisFunctionAccess() {
		return pAnalysisFunction;
	}
	
	public ParserRule getAnalysisFunctionRule() {
		return getAnalysisFunctionAccess().getRule();
	}

	//Information:
	//	{Information} name=ID;
	public InformationElements getInformationAccess() {
		return pInformation;
	}
	
	public ParserRule getInformationRule() {
		return getInformationAccess().getRule();
	}

	//SpecObj SpecObject:
	//	SPECOBJECTDELIMITERLEFT (HeadingSO | ReqPatSO | FreeTextSO) SPECOBJECTDELIMITERRIGHT
	public ReqPatGrammarAccess.SpecObjElements getSpecObjAccess() {
		return gaReqPat.getSpecObjAccess();
	}
	
	public ParserRule getSpecObjRule() {
		return getSpecObjAccess().getRule();
	}

	//HeadingSO HeadingSpecObject:
	//	{HeadingSpecObject} PARAMDELIMITERLEFT 'H' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
	//	(PARAMDELIMITERLEFT
	//	parent=STRING PARAMDELIMITERRIGHT)?
	//	text=STRING
	public ReqPatGrammarAccess.HeadingSOElements getHeadingSOAccess() {
		return gaReqPat.getHeadingSOAccess();
	}
	
	public ParserRule getHeadingSORule() {
		return getHeadingSOAccess().getRule();
	}

	//ReqPatSO RequirementPatternSpecObject:
	//	{RequirementPatternSpecObject} PARAMDELIMITERLEFT 'RP' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID
	//	PARAMDELIMITERRIGHT (PARAMDELIMITERLEFT
	//	parent=STRING PARAMDELIMITERRIGHT)?
	//	requirementPatterns+=super::RequirementPattern+
	public ReqPatGrammarAccess.ReqPatSOElements getReqPatSOAccess() {
		return gaReqPat.getReqPatSOAccess();
	}
	
	public ParserRule getReqPatSORule() {
		return getReqPatSOAccess().getRule();
	}

	//FreeTextSO FreeTextSpecObject:
	//	{FreeTextSpecObject} PARAMDELIMITERLEFT 'F' PARAMDELIMITERRIGHT PARAMDELIMITERLEFT id=ID PARAMDELIMITERRIGHT
	//	(PARAMDELIMITERLEFT
	//	parent=STRING PARAMDELIMITERRIGHT)?
	//	freeText=STRING?
	public ReqPatGrammarAccess.FreeTextSOElements getFreeTextSOAccess() {
		return gaReqPat.getFreeTextSOAccess();
	}
	
	public ParserRule getFreeTextSORule() {
		return getFreeTextSOAccess().getRule();
	}

	//terminal PARAMDELIMITERLEFT:
	//	'[';
	public TerminalRule getPARAMDELIMITERLEFTRule() {
		return gaReqPat.getPARAMDELIMITERLEFTRule();
	} 

	//terminal PARAMDELIMITERRIGHT:
	//	']';
	public TerminalRule getPARAMDELIMITERRIGHTRule() {
		return gaReqPat.getPARAMDELIMITERRIGHTRule();
	} 

	//terminal SPECOBJECTDELIMITERLEFT:
	//	'{';
	public TerminalRule getSPECOBJECTDELIMITERLEFTRule() {
		return gaReqPat.getSPECOBJECTDELIMITERLEFTRule();
	} 

	//terminal SPECOBJECTDELIMITERRIGHT:
	//	'}';
	public TerminalRule getSPECOBJECTDELIMITERRIGHTRule() {
		return gaReqPat.getSPECOBJECTDELIMITERRIGHTRule();
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaReqPat.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
